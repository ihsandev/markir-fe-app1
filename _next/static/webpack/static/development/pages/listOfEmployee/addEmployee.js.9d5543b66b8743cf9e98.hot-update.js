webpackHotUpdate("static\\development\\pages\\listOfEmployee\\addEmployee.js",{

/***/ "./components/containers/listOfEmployee/index.jsx":
/*!********************************************************!*\
  !*** ./components/containers/listOfEmployee/index.jsx ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antd/lib/modal */ "./node_modules/antd/lib/modal/index.js");
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antd_lib_modal__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd_lib_card__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd/lib/card */ "./node_modules/antd/lib/card/index.js");
/* harmony import */ var antd_lib_card__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd_lib_card__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var antd_lib_table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! antd/lib/table */ "./node_modules/antd/lib/table/index.js");
/* harmony import */ var antd_lib_table__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(antd_lib_table__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var antd_lib_popconfirm__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! antd/lib/popconfirm */ "./node_modules/antd/lib/popconfirm/index.js");
/* harmony import */ var antd_lib_popconfirm__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(antd_lib_popconfirm__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var antd_lib_divider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! antd/lib/divider */ "./node_modules/antd/lib/divider/index.js");
/* harmony import */ var antd_lib_divider__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(antd_lib_divider__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! antd/lib/tooltip */ "./node_modules/antd/lib/tooltip/index.js");
/* harmony import */ var antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! antd/lib/button */ "./node_modules/antd/lib/button/index.js");
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(antd_lib_button__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! antd/lib/message */ "./node_modules/antd/lib/message/index.js");
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(antd_lib_message__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var antd_lib_icon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! antd/lib/icon */ "./node_modules/antd/lib/icon/index.js");
/* harmony import */ var antd_lib_icon__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(antd_lib_icon__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! antd/lib/input */ "./node_modules/antd/lib/input/index.js");
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(antd_lib_input__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @emotion/core */ "./node_modules/@emotion/core/dist/core.browser.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var react_highlight_words__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! react-highlight-words */ "./node_modules/react-highlight-words/dist/main.js");
/* harmony import */ var react_highlight_words__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(react_highlight_words__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var Config_routes__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! Config/routes */ "./config/routes.js");
/* harmony import */ var Config_routes__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(Config_routes__WEBPACK_IMPORTED_MODULE_13__);












function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






var _ref =  false ? undefined : {
  name: "dtjl5c",
  styles: "border-color:#ffc30e;color:#ffc30e;&:hover{border-color:#ffc30e;color:#ffc30e;}&:focus{border-color:#ffc30e;color:#ffc30e;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref2 =  false ? undefined : {
  name: "1fygg7s",
  styles: "border-radius:8px;border-top:4px solid rgb(24,144,255);box-shadow:1px 4px 15px rgba(24,144,255,0.1);@media(max-width:700px){min-width:77vw;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref3 =  false ? undefined : {
  name: "1x3ijnx",
  styles: "display:flex;justify-content:flex-end;margin-bottom:1em;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref4 =  false ? undefined : {
  name: "ae2rkl",
  styles: "border:1px solid #ddd;margin-right:1em;&:hover{border-color:green;}img{width:20px;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref5 =  false ? undefined : {
  name: "y1jc3m",
  styles: "border:1px solid #ddd;&:hover{border-color:green;}img{width:20px;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref6 =  false ? undefined : {
  name: "n7viab",
  styles: "min-width:250px;overflow-x:auto;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref7 =  false ? undefined : {
  name: "1pmm33",
  styles: "display:grid;grid-template-columns:1fr 2fr;grid-column-gap:1em;justify-items:center;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxEVENcXFByb2plY3QgUmVhY3RcXE1BUktJUi1GRVxcYXBsaWthc2ktMVxcY29tcG9uZW50c1xcY29udGFpbmVyc1xcbGlzdE9mRW1wbG95ZWVcXGluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzUHFCIiwiZmlsZSI6IkQ6XFxEVENcXFByb2plY3QgUmVhY3RcXE1BUktJUi1GRVxcYXBsaWthc2ktMVxcY29tcG9uZW50c1xcY29udGFpbmVyc1xcbGlzdE9mRW1wbG95ZWVcXGluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwge0NvbXBvbmVudH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnXHJcbmltcG9ydCB7IFRhYmxlLCBDYXJkLCBcclxuICBCdXR0b24sIFxyXG4gIFRvb2x0aXAsIE1vZGFsLCBcclxuICBQb3Bjb25maXJtLCBJY29uLCBtZXNzYWdlLFxyXG4gIElucHV0LCBEaXZpZGVyLFxyXG59IGZyb20gJ2FudGQnXHJcbmltcG9ydCBIaWdobGlnaHRlciBmcm9tICdyZWFjdC1oaWdobGlnaHQtd29yZHMnXHJcbmltcG9ydCB7IExpbmsgfSBmcm9tICdDb25maWcvcm91dGVzJ1xyXG5cclxuY2xhc3MgTGlzdE9mRW1wbG95ZWUgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICBzdGF0ZSA9IHtcclxuICAgIGxvYWRpbmc6IGZhbHNlLFxyXG4gICAgZGV0YWlsVmlzaWJsZTogZmFsc2UsXHJcbiAgICBlZGl0VmlzaWJsZTogZmFsc2VcclxuICB9XHJcblxyXG4gIHNob3dNb2RhbCA9IGtleXdvcmQgPT4ge1xyXG4gICAgaWYoa2V5d29yZCA9PT0gJ2RldGFpbCcpIHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgZGV0YWlsVmlzaWJsZTogdHJ1ZSxcclxuICAgICAgfSlcclxuICAgIH0gZWxzZSBpZihrZXl3b3JkID09PSAnZWRpdCcpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBlZGl0VmlzaWJsZTogdHJ1ZSxcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGhhbmRsZU9rID0ga2V5d29yZCA9PiB7XHJcbiAgICBpZihrZXl3b3JkID09PSAnZGV0YWlsJyl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkaW5nOiB0cnVlIH0pXHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkaW5nOiBmYWxzZSwgZGV0YWlsVmlzaWJsZTogZmFsc2UgfSlcclxuICAgICAgfSwgMzAwMClcclxuICAgIH0gZWxzZSBpZihrZXl3b3JkID09PSAnZWRpdCcpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogdHJ1ZSB9KVxyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogZmFsc2UsIGVkaXRWaXNpYmxlOiBmYWxzZSB9KVxyXG4gICAgICB9LCAzMDAwKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlQ2FuY2VsID0ga2V5d29yZCA9PiB7XHJcbiAgICBpZihrZXl3b3JkID09PSAnZGV0YWlsJykge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHsgZGV0YWlsVmlzaWJsZTogZmFsc2UgfSlcclxuICAgIH0gZWxzZSBpZihrZXl3b3JkID09PSAnZWRpdCcpIHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVkaXRWaXNpYmxlOiBmYWxzZSB9KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0Q29sdW1uU2VhcmNoUHJvcHMgPSAoZGF0YUluZGV4KSA9PiAoe1xyXG4gICAgZmlsdGVyRHJvcGRvd246ICh7XHJcbiAgICAgIHNldFNlbGVjdGVkS2V5cywgc2VsZWN0ZWRLZXlzLCBjb25maXJtLCBjbGVhckZpbHRlcnMsXHJcbiAgICB9KSA9PiAoXHJcbiAgICAgIDxkaXYgc3R5bGU9e3sgcGFkZGluZzogOCB9fT5cclxuICAgICAgICA8SW5wdXRcclxuICAgICAgICAgIHJlZj17bm9kZSA9PiB7IHRoaXMuc2VhcmNoSW5wdXQgPSBub2RlIH19XHJcbiAgICAgICAgICBwbGFjZWhvbGRlcj17YFNlYXJjaCAke2RhdGFJbmRleH1gfVxyXG4gICAgICAgICAgdmFsdWU9e3NlbGVjdGVkS2V5c1swXX1cclxuICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHNldFNlbGVjdGVkS2V5cyhlLnRhcmdldC52YWx1ZSA/IFtlLnRhcmdldC52YWx1ZV0gOiBbXSl9XHJcbiAgICAgICAgICBvblByZXNzRW50ZXI9eygpID0+IHRoaXMuaGFuZGxlU2VhcmNoKHNlbGVjdGVkS2V5cywgY29uZmlybSl9XHJcbiAgICAgICAgICBzdHlsZT17eyB3aWR0aDogMTg4LCBtYXJnaW5Cb3R0b206IDgsIGRpc3BsYXk6ICdibG9jaycgfX1cclxuICAgICAgICAvPlxyXG4gICAgICAgIHsvKiA8QnV0dG9uXHJcbiAgICAgICAgICB0eXBlPVwicHJpbWFyeVwiXHJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLmhhbmRsZVNlYXJjaChzZWxlY3RlZEtleXMsIGNvbmZpcm0pfVxyXG4gICAgICAgICAgaWNvbj1cInNlYXJjaFwiXHJcbiAgICAgICAgICBzaXplPVwic21hbGxcIlxyXG4gICAgICAgICAgc3R5bGU9e3sgd2lkdGg6IDkwLCBtYXJnaW5SaWdodDogOCB9fVxyXG4gICAgICAgID5cclxuICAgICAgICAgIFNlYXJjaFxyXG4gICAgICAgIDwvQnV0dG9uPiAqL31cclxuICAgICAgPC9kaXY+XHJcbiAgICApLFxyXG4gICAgZmlsdGVySWNvbjogZmlsdGVyZWQgPT4gPEljb24gdHlwZT1cInNlYXJjaFwiIHN0eWxlPXt7IGNvbG9yOiBmaWx0ZXJlZCA/ICcjMTg5MGZmJyA6IHVuZGVmaW5lZCB9fSAvPixcclxuICAgIG9uRmlsdGVyOiAodmFsdWUsIHJlY29yZCkgPT4gcmVjb3JkW2RhdGFJbmRleF0udG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHZhbHVlLnRvTG93ZXJDYXNlKCkpLFxyXG4gICAgb25GaWx0ZXJEcm9wZG93blZpc2libGVDaGFuZ2U6ICh2aXNpYmxlKSA9PiB7XHJcbiAgICAgIGlmICh2aXNpYmxlKSB7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnNlYXJjaElucHV0LnNlbGVjdCgpKVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgcmVuZGVyOiAodGV4dCkgPT4gKFxyXG4gICAgICA8SGlnaGxpZ2h0ZXJcclxuICAgICAgICBoaWdobGlnaHRTdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZjMDY5JywgcGFkZGluZzogMCB9fVxyXG4gICAgICAgIHNlYXJjaFdvcmRzPXtbdGhpcy5zdGF0ZS5zZWFyY2hUZXh0XX1cclxuICAgICAgICBhdXRvRXNjYXBlXHJcbiAgICAgICAgdGV4dFRvSGlnaGxpZ2h0PXt0ZXh0LnRvU3RyaW5nKCl9XHJcbiAgICAgIC8+XHJcbiAgICApLFxyXG4gIH0pXHJcblxyXG4gIGhhbmRsZVNlYXJjaCA9IChzZWxlY3RlZEtleXMsIGNvbmZpcm0pID0+IHtcclxuICAgIGNvbmZpcm0oKVxyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNlYXJjaFRleHQ6IHNlbGVjdGVkS2V5c1swXSB9KVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlUmVzZXQgPSAoY2xlYXJGaWx0ZXJzKSA9PiB7XHJcbiAgICBjbGVhckZpbHRlcnMoKVxyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNlYXJjaFRleHQ6ICcnIH0pXHJcbiAgfVxyXG4gIFxyXG4gIHJlbmRlcigpe1xyXG4gICAgY29uc3QgdGV4dCA9ICdZYWtpbiBpbmdpbiBoYXB1cz8nXHJcblxyXG4gICAgZnVuY3Rpb24gY29uZmlybSgpIHtcclxuICAgICAgbWVzc2FnZS5pbmZvKCdDbGlja2VkIG9uIFllcy4nKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHsgZGV0YWlsVmlzaWJsZSwgZWRpdFZpc2libGUsIGxvYWRpbmcgfSA9IHRoaXMuc3RhdGVcclxuXHJcbiAgICBjb25zdCBjb2x1bW5zID0gW3tcclxuICAgICAgdGl0bGU6ICdOYW1hJyxcclxuICAgICAgZGF0YUluZGV4OiAnbmFtYScsXHJcbiAgICAgIC4uLnRoaXMuZ2V0Q29sdW1uU2VhcmNoUHJvcHMoJ25hbWEnKSxcclxuICAgIH0sIHtcclxuICAgICAgdGl0bGU6ICdOaWsnLFxyXG4gICAgICBkYXRhSW5kZXg6ICduaWsnLFxyXG4gICAgICBkZWZhdWx0U29ydE9yZGVyOiAnZGVzY2VuZCcsXHJcbiAgICAgIHNvcnRlcjogKGEsIGIpID0+IGEubmlrIC0gYi5uaWssXHJcbiAgICAgIC4uLnRoaXMuZ2V0Q29sdW1uU2VhcmNoUHJvcHMoJ25paycpLFxyXG4gICAgfSwge1xyXG4gICAgICB0aXRsZTogJ0phYmF0YW4nLFxyXG4gICAgICBkYXRhSW5kZXg6ICdqYWJhdGFuJyxcclxuICAgICAgLi4udGhpcy5nZXRDb2x1bW5TZWFyY2hQcm9wcygnamFiYXRhbicpLFxyXG4gICAgfSwge1xyXG4gICAgICB0aXRsZTogJ1NoaWZ0JyxcclxuICAgICAgZGF0YUluZGV4OiAnc2hpZnQnLFxyXG4gICAgICAuLi50aGlzLmdldENvbHVtblNlYXJjaFByb3BzKCdzaGlmdCcpLFxyXG4gICAgfSwge1xyXG4gICAgICB0aXRsZTogJ0Frc2knLCBkYXRhSW5kZXg6ICcnLCBrZXk6ICd4JywgcmVuZGVyOiAoKSA9PiAoXHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgIDxUb29sdGlwIHBsYWNlbWVudD1cImJvdHRvbVwiIHRpdGxlPVwiRWRpdFwiPlxyXG4gICAgICAgICAgICA8QnV0dG9uIGljb249XCJlZGl0XCIgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogI2ZmYzMwZTsgXHJcbiAgICAgICAgICAgIGNvbG9yOiAjZmZjMzBlOyBcclxuICAgICAgICAgICAgICAmOmhvdmVyeyBcclxuICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogI2ZmYzMwZTsgXHJcbiAgICAgICAgICAgICAgICBjb2xvcjogI2ZmYzMwZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgJjpmb2N1c3sgXHJcbiAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6ICNmZmMzMGU7IFxyXG4gICAgICAgICAgICAgICAgY29sb3I6ICNmZmMzMGU7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBgfSBcclxuICAgICAgICAgICAgZ2hvc3Qgb25DbGljaz17KCkgPT4gdGhpcy5zaG93TW9kYWwoJ2VkaXQnKX0vPlxyXG4gICAgICAgICAgPC9Ub29sdGlwPlxyXG4gICAgICAgICAgPERpdmlkZXIgdHlwZT1cInZlcnRpY2FsXCIgLz5cclxuICAgICAgICAgIDxUb29sdGlwIHBsYWNlbWVudD1cImJvdHRvbVwiIHRpdGxlPVwiSGFwdXNcIj5cclxuICAgICAgICAgICAgPFBvcGNvbmZpcm0gcGxhY2VtZW50PVwidG9wXCIgdGl0bGU9e3RleHR9IG9uQ29uZmlybT17Y29uZmlybX0gb2tUZXh0PVwiWWVzXCIgY2FuY2VsVGV4dD1cIk5vXCI+XHJcbiAgICAgICAgICAgICAgPEJ1dHRvbiBpY29uPVwiZGVsZXRlXCIgdHlwZT1cImRhbmdlclwiIGdob3N0Lz5cclxuICAgICAgICAgICAgPC9Qb3Bjb25maXJtPlxyXG4gICAgICAgICAgPC9Ub29sdGlwPlxyXG4gICAgICAgICAgPERpdmlkZXIgdHlwZT1cInZlcnRpY2FsXCIgLz5cclxuICAgICAgICAgIDxUb29sdGlwIHBsYWNlbWVudD1cImJvdHRvbVwiIHRpdGxlPVwiRGV0YWlsXCI+XHJcbiAgICAgICAgICAgIDxCdXR0b24gaWNvbj1cIm1vcmVcIiB0eXBlPVwicHJpbWFyeVwiIGdob3N0IG9uQ2xpY2s9eygpID0+IHRoaXMuc2hvd01vZGFsKCdkZXRhaWwnKX0vPlxyXG4gICAgICAgICAgPC9Ub29sdGlwPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICApXHJcbiAgICB9XVxyXG4gICAgXHJcbiAgICBjb25zdCBkYXRhID0gW3tcclxuICAgICAga2V5OiAnMScsXHJcbiAgICAgIG5hbWE6ICdKb2huIEJyb3duJyxcclxuICAgICAgbmlrOiAxMTExMjM0NSxcclxuICAgICAgamFiYXRhbjogJ1N0YWYgS2FzaXInLFxyXG4gICAgICBzaGlmdDogJ1NoaWZ0IDEnXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogJzInLFxyXG4gICAgICBuYW1hOiAnSmltIEdyZWVuJyxcclxuICAgICAgbmlrOiAxMTExMjM0NixcclxuICAgICAgamFiYXRhbjogJ1N0YWYgS2FzaXInLFxyXG4gICAgICBzaGlmdDogJ1NoaWZ0IDInXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogJzMnLFxyXG4gICAgICBuYW1hOiAnS29rbyBGb3JrJyxcclxuICAgICAgbmlrOiAxMTExMjM0NixcclxuICAgICAgamFiYXRhbjogJ1N0YWYgS2FzaXInLFxyXG4gICAgICBzaGlmdDogJ1NoaWZ0IDMnXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogJzQnLFxyXG4gICAgICBuYW1hOiAnTGFsYSBHcmVlbicsXHJcbiAgICAgIG5pazogMTExMTIzNDYsXHJcbiAgICAgIGphYmF0YW46ICdTdGFmIEthc2lyJyxcclxuICAgICAgc2hpZnQ6ICdTaGlmdCA0J1xyXG4gICAgfV1cclxuXHJcbiAgICByZXR1cm4oXHJcbiAgICAgIDw+XHJcbiAgICAgIDxkaXY+PGgyPkRhZnRhciBLYXJ5YXdhbjwvaDI+PC9kaXY+XHJcbiAgICAgIDxDYXJkIGNzcz17Y3NzYFxyXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcclxuICAgICAgICBib3JkZXItdG9wOiA0cHggc29saWQgcmdiKDI0LCAxNDQsIDI1NSk7XHJcbiAgICAgICAgYm94LXNoYWRvdzogMXB4IDRweCAxNXB4IHJnYmEoMjQsIDE0NCwgMjU1LCAwLjEpO1xyXG4gICAgICAgIEBtZWRpYShtYXgtd2lkdGg6IDcwMHB4KSB7XHJcbiAgICAgICAgICBtaW4td2lkdGg6IDc3dnc7XHJcbiAgICAgICAgfVxyXG4gICAgICBgfT5cclxuICAgICAgICA8ZGl2IGNzcz17Y3NzYGRpc3BsYXk6IGZsZXg7IGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7IG1hcmdpbi1ib3R0b206IDFlbTtgfT5cclxuICAgICAgICAgIDxUb29sdGlwIHBsYWNlbWVudD1cImJvdHRvbVwiIHRpdGxlPVwiRXhwb3J0IEV4Y2VsXCI+XHJcbiAgICAgICAgICAgIDxCdXR0b24gY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XHJcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMWVtO1xyXG4gICAgICAgICAgICAmOmhvdmVyIHtcclxuICAgICAgICAgICAgICBib3JkZXItY29sb3I6IGdyZWVuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgaW1nIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAyMHB4O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH0+XHJcbiAgICAgICAgICAgICAgPGltZyBzcmM9XCIvc3RhdGljL2ljb25zL2V4Y2VsLnBuZ1wiIC8+XHJcbiAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgPC9Ub29sdGlwPlxyXG4gICAgICAgICAgPFRvb2x0aXAgcGxhY2VtZW50PVwiYm90dG9tXCIgdGl0bGU9XCJQcmludFwiPlxyXG4gICAgICAgICAgICA8QnV0dG9uIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xyXG4gICAgICAgICAgICAmOmhvdmVyIHtcclxuICAgICAgICAgICAgICBib3JkZXItY29sb3I6IGdyZWVuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgaW1nIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAyMHB4O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH0+XHJcbiAgICAgICAgICAgICAgPGltZyBzcmM9XCIvc3RhdGljL2ljb25zL3ByaW50LnBuZ1wiIC8+XHJcbiAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgPC9Ub29sdGlwPlxyXG4gICAgICAgICAgPExpbmsgcm91dGU9XCJhZGRFbXBsb3llZVwiPlxyXG4gICAgICAgICAgICA8QnV0dG9uIHR5cGU9XCJwcmltYXJ5XCI+XHJcbiAgICAgICAgICAgICAgVGFtYmFoIEthcnlhd2FuXHJcbiAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY3NzPXtjc3NgbWluLXdpZHRoOiAyNTBweDsgb3ZlcmZsb3cteDogYXV0bztgfT5cclxuICAgICAgICAgIDxUYWJsZSBjb2x1bW5zPXtjb2x1bW5zfSBkYXRhU291cmNlPXtkYXRhfSAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L0NhcmQ+XHJcbiAgICAgIDxNb2RhbFxyXG4gICAgICAgIHZpc2libGU9e2RldGFpbFZpc2libGV9XHJcbiAgICAgICAgdGl0bGU9XCJEZXRhaWxcIlxyXG4gICAgICAgIG9uT2s9eygpID0+IHRoaXMuaGFuZGxlT2soJ2RldGFpbCcpfVxyXG4gICAgICAgIG9uQ2FuY2VsPXsoKSA9PiB0aGlzLmhhbmRsZUNhbmNlbCgnZGV0YWlsJyl9XHJcbiAgICAgICAgZm9vdGVyPXtmYWxzZX1cclxuICAgICAgICB3aWR0aD1cIjcwMHB4XCJcclxuICAgICAgPlxyXG4gICAgICAgIDxkaXYgY3NzPXtjc3NgXHJcbiAgICAgICAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMmZyO1xyXG4gICAgICAgICAgZ3JpZC1jb2x1bW4tZ2FwOiAxZW07XHJcbiAgICAgICAgICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgYH0+XHJcbiAgICAgICAgICA8ZGl2IGNzcz17Y3NzYFxyXG4gICAgICAgICAgICBoZWlnaHQ6IDE1MHB4O1xyXG4gICAgICAgICAgICB3aWR0aDogMTUwcHg7XHJcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJy9zdGF0aWMvZGVmYXVsdHBsYWNlaG9sZGVyLnBuZycpO1xyXG4gICAgICAgICAgYH0gXHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJwaG90b0VtcGxveWVlXCJcclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8ZGl2IGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgICAgICAgZ3JpZC1yb3ctZ2FwOiAyZW07XHJcbiAgICAgICAgICAgIC5kZXRhaWxDb250ZW50e1xyXG4gICAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMmZyO1xyXG4gICAgICAgICAgICAgIGdyaWQtY29sdW1uLWdhcDogMWVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkZXRhaWxDb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgPGxhYmVsPk5hbWEgTGVuZ2thcDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgPGxhYmVsPjxzcGFuPjo8L3NwYW4+IEFsaWZpYSBJbmRyYTwvbGFiZWw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRldGFpbENvbnRlbnRcIj5cclxuICAgICAgICAgICAgICA8bGFiZWw+TklLPC9sYWJlbD5cclxuICAgICAgICAgICAgICA8bGFiZWw+PHNwYW4+Ojwvc3Bhbj4gMTIyMzM0NDwvbGFiZWw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRldGFpbENvbnRlbnRcIj5cclxuICAgICAgICAgICAgICA8bGFiZWw+RW1haWw8L2xhYmVsPlxyXG4gICAgICAgICAgICAgIDxsYWJlbD48c3Bhbj46PC9zcGFuPiBleGFtcGxlLm1haWwuY29tPC9sYWJlbD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGV0YWlsQ29udGVudFwiPlxyXG4gICAgICAgICAgICAgIDxsYWJlbD5KZW5pcyBLZWxhbWluPC9sYWJlbD5cclxuICAgICAgICAgICAgICA8bGFiZWw+PHNwYW4+Ojwvc3Bhbj4gUHJpYTwvbGFiZWw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRldGFpbENvbnRlbnRcIj5cclxuICAgICAgICAgICAgICA8bGFiZWw+VGVtcGF0L1RhbmdnYWwgTGFoaXI8L2xhYmVsPlxyXG4gICAgICAgICAgICAgIDxsYWJlbD48c3Bhbj46PC9zcGFuPiBKYWthcnRhLCAyMiBNYXJldCAxOTkzPC9sYWJlbD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGV0YWlsQ29udGVudFwiPlxyXG4gICAgICAgICAgICAgIDxsYWJlbD5Oby4gVGVsZXBvbjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgPGxhYmVsPjxzcGFuPjo8L3NwYW4+IDA4NzY3NjU1NjQ1ODwvbGFiZWw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRldGFpbENvbnRlbnRcIj5cclxuICAgICAgICAgICAgICA8bGFiZWw+SmFiYXRhbjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgPGxhYmVsPjxzcGFuPjo8L3NwYW4+IFN0YWYgS2FzaXI8L2xhYmVsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkZXRhaWxDb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgPGxhYmVsPlNoaWZ0PC9sYWJlbD5cclxuICAgICAgICAgICAgICA8bGFiZWw+PHNwYW4+Ojwvc3Bhbj4gU2hpZnQgSSB8IDA2LjAwIC0gMTIuMDA8L2xhYmVsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L01vZGFsPlxyXG4gICAgICA8Lz5cclxuICAgIClcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IExpc3RPZkVtcGxveWVlIl19 */"
};

var _ref8 =  false ? undefined : {
  name: "13x3ctw",
  styles: "height:150px;width:150px;border-radius:50%;position:relative;background-size:cover;background-repeat:no-repeat;background-image:url('/static/defaultplaceholder.png');",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref9 =  false ? undefined : {
  name: "1sehodu",
  styles: "display:grid;grid-row-gap:2em;.detailContent{display:grid;grid-template-columns:1fr 2fr;grid-column-gap:1em;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var ListOfEmployee =
/*#__PURE__*/
function (_Component) {
  _inherits(ListOfEmployee, _Component);

  function ListOfEmployee() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ListOfEmployee);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ListOfEmployee)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      loading: false,
      detailVisible: false,
      editVisible: false
    });

    _defineProperty(_assertThisInitialized(_this), "showModal", function (keyword) {
      if (keyword === 'detail') {
        _this.setState({
          detailVisible: true
        });
      } else if (keyword === 'edit') {
        _this.setState({
          editVisible: true
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleOk", function (keyword) {
      if (keyword === 'detail') {
        _this.setState({
          loading: true
        });

        setTimeout(function () {
          _this.setState({
            loading: false,
            detailVisible: false
          });
        }, 3000);
      } else if (keyword === 'edit') {
        _this.setState({
          loading: true
        });

        setTimeout(function () {
          _this.setState({
            loading: false,
            editVisible: false
          });
        }, 3000);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleCancel", function (keyword) {
      if (keyword === 'detail') {
        _this.setState({
          detailVisible: false
        });
      } else if (keyword === 'edit') {
        _this.setState({
          editVisible: false
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getColumnSearchProps", function (dataIndex) {
      return {
        filterDropdown: function filterDropdown(_ref10) {
          var setSelectedKeys = _ref10.setSelectedKeys,
              selectedKeys = _ref10.selectedKeys,
              confirm = _ref10.confirm,
              clearFilters = _ref10.clearFilters;
          return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
            style: {
              padding: 8
            }
          }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_input__WEBPACK_IMPORTED_MODULE_9___default.a, {
            ref: function ref(node) {
              _this.searchInput = node;
            },
            placeholder: "Search ".concat(dataIndex),
            value: selectedKeys[0],
            onChange: function onChange(e) {
              return setSelectedKeys(e.target.value ? [e.target.value] : []);
            },
            onPressEnter: function onPressEnter() {
              return _this.handleSearch(selectedKeys, confirm);
            },
            style: {
              width: 188,
              marginBottom: 8,
              display: 'block'
            }
          }));
        },
        filterIcon: function filterIcon(filtered) {
          return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_icon__WEBPACK_IMPORTED_MODULE_8___default.a, {
            type: "search",
            style: {
              color: filtered ? '#1890ff' : undefined
            }
          });
        },
        onFilter: function onFilter(value, record) {
          return record[dataIndex].toString().toLowerCase().includes(value.toLowerCase());
        },
        onFilterDropdownVisibleChange: function onFilterDropdownVisibleChange(visible) {
          if (visible) {
            setTimeout(function () {
              return _this.searchInput.select();
            });
          }
        },
        render: function render(text) {
          return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(react_highlight_words__WEBPACK_IMPORTED_MODULE_12___default.a, {
            highlightStyle: {
              backgroundColor: '#ffc069',
              padding: 0
            },
            searchWords: [_this.state.searchText],
            autoEscape: true,
            textToHighlight: text.toString()
          });
        }
      };
    });

    _defineProperty(_assertThisInitialized(_this), "handleSearch", function (selectedKeys, confirm) {
      confirm();

      _this.setState({
        searchText: selectedKeys[0]
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleReset", function (clearFilters) {
      clearFilters();

      _this.setState({
        searchText: ''
      });
    });

    return _this;
  }

  _createClass(ListOfEmployee, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var text = 'Yakin ingin hapus?';

      function confirm() {
        antd_lib_message__WEBPACK_IMPORTED_MODULE_7___default.a.info('Clicked on Yes.');
      }

      var _this$state = this.state,
          detailVisible = _this$state.detailVisible,
          editVisible = _this$state.editVisible,
          loading = _this$state.loading;
      var columns = [_objectSpread({
        title: 'Nama',
        dataIndex: 'nama'
      }, this.getColumnSearchProps('nama')), _objectSpread({
        title: 'Nik',
        dataIndex: 'nik',
        defaultSortOrder: 'descend',
        sorter: function sorter(a, b) {
          return a.nik - b.nik;
        }
      }, this.getColumnSearchProps('nik')), _objectSpread({
        title: 'Jabatan',
        dataIndex: 'jabatan'
      }, this.getColumnSearchProps('jabatan')), _objectSpread({
        title: 'Shift',
        dataIndex: 'shift'
      }, this.getColumnSearchProps('shift')), {
        title: 'Aksi',
        dataIndex: '',
        key: 'x',
        render: function render() {
          return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_5___default.a, {
            placement: "bottom",
            title: "Edit"
          }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_6___default.a, {
            icon: "edit",
            css: _ref,
            ghost: true,
            onClick: function onClick() {
              return _this2.showModal('edit');
            }
          })), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_divider__WEBPACK_IMPORTED_MODULE_4___default.a, {
            type: "vertical"
          }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_5___default.a, {
            placement: "bottom",
            title: "Hapus"
          }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_popconfirm__WEBPACK_IMPORTED_MODULE_3___default.a, {
            placement: "top",
            title: text,
            onConfirm: confirm,
            okText: "Yes",
            cancelText: "No"
          }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_6___default.a, {
            icon: "delete",
            type: "danger",
            ghost: true
          }))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_divider__WEBPACK_IMPORTED_MODULE_4___default.a, {
            type: "vertical"
          }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_5___default.a, {
            placement: "bottom",
            title: "Detail"
          }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_6___default.a, {
            icon: "more",
            type: "primary",
            ghost: true,
            onClick: function onClick() {
              return _this2.showModal('detail');
            }
          })));
        }
      }];
      var data = [{
        key: '1',
        nama: 'John Brown',
        nik: 11112345,
        jabatan: 'Staf Kasir',
        shift: 'Shift 1'
      }, {
        key: '2',
        nama: 'Jim Green',
        nik: 11112346,
        jabatan: 'Staf Kasir',
        shift: 'Shift 2'
      }, {
        key: '3',
        nama: 'Koko Fork',
        nik: 11112346,
        jabatan: 'Staf Kasir',
        shift: 'Shift 3'
      }, {
        key: '4',
        nama: 'Lala Green',
        nik: 11112346,
        jabatan: 'Staf Kasir',
        shift: 'Shift 4'
      }];
      return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(react__WEBPACK_IMPORTED_MODULE_11___default.a.Fragment, null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("h2", null, "Daftar Karyawan")), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_card__WEBPACK_IMPORTED_MODULE_1___default.a, {
        css: _ref2
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        css: _ref3
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_5___default.a, {
        placement: "bottom",
        title: "Export Excel"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_6___default.a, {
        css: _ref4
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("img", {
        src: "/static/icons/excel.png"
      }))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_5___default.a, {
        placement: "bottom",
        title: "Print"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_6___default.a, {
        css: _ref5
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("img", {
        src: "/static/icons/print.png"
      }))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(Config_routes__WEBPACK_IMPORTED_MODULE_13__["Link"], {
        route: "addEmployee"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_6___default.a, {
        type: "primary"
      }, "Tambah Karyawan"))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        css: _ref6
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_table__WEBPACK_IMPORTED_MODULE_2___default.a, {
        columns: columns,
        dataSource: data
      }))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_modal__WEBPACK_IMPORTED_MODULE_0___default.a, {
        visible: detailVisible,
        title: "Detail",
        onOk: function onOk() {
          return _this2.handleOk('detail');
        },
        onCancel: function onCancel() {
          return _this2.handleCancel('detail');
        },
        footer: false,
        width: "700px"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        css: _ref7
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        css: _ref8,
        className: "photoEmployee"
      }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        css: _ref9
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        className: "detailContent"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, "Nama Lengkap"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("span", null, ":"), " Alifia Indra")), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        className: "detailContent"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, "NIK"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("span", null, ":"), " 1223344")), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        className: "detailContent"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, "Email"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("span", null, ":"), " example.mail.com")), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        className: "detailContent"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, "Jenis Kelamin"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("span", null, ":"), " Pria")), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        className: "detailContent"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, "Tempat/Tanggal Lahir"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("span", null, ":"), " Jakarta, 22 Maret 1993")), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        className: "detailContent"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, "No. Telepon"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("span", null, ":"), " 087676556458")), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        className: "detailContent"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, "Jabatan"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("span", null, ":"), " Staf Kasir")), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        className: "detailContent"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, "Shift"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("span", null, ":"), " Shift I | 06.00 - 12.00"))))));
    }
  }]);

  return ListOfEmployee;
}(react__WEBPACK_IMPORTED_MODULE_11__["Component"]);

/* harmony default export */ __webpack_exports__["default"] = (ListOfEmployee);

/***/ })

})
//# sourceMappingURL=addEmployee.js.9d5543b66b8743cf9e98.hot-update.js.map