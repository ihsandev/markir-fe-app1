webpackHotUpdate("static\\development\\pages\\masterData\\userType.js",{

/***/ "./components/containers/masterData/vehicleType/index.jsx":
/*!****************************************************************!*\
  !*** ./components/containers/masterData/vehicleType/index.jsx ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var antd_lib_row__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antd/lib/row */ "./node_modules/antd/lib/row/index.js");
/* harmony import */ var antd_lib_row__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antd_lib_row__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd_lib_col__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd/lib/col */ "./node_modules/antd/lib/col/index.js");
/* harmony import */ var antd_lib_col__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd_lib_col__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var antd_lib_card__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! antd/lib/card */ "./node_modules/antd/lib/card/index.js");
/* harmony import */ var antd_lib_card__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(antd_lib_card__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var antd_lib_table__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! antd/lib/table */ "./node_modules/antd/lib/table/index.js");
/* harmony import */ var antd_lib_table__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(antd_lib_table__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! antd/lib/modal */ "./node_modules/antd/lib/modal/index.js");
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(antd_lib_modal__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var antd_lib_form__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! antd/lib/form */ "./node_modules/antd/lib/form/index.js");
/* harmony import */ var antd_lib_form__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(antd_lib_form__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! antd/lib/input */ "./node_modules/antd/lib/input/index.js");
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(antd_lib_input__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var antd_lib_divider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! antd/lib/divider */ "./node_modules/antd/lib/divider/index.js");
/* harmony import */ var antd_lib_divider__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(antd_lib_divider__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! antd/lib/tooltip */ "./node_modules/antd/lib/tooltip/index.js");
/* harmony import */ var antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! antd/lib/button */ "./node_modules/antd/lib/button/index.js");
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(antd_lib_button__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var antd_lib_tag__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! antd/lib/tag */ "./node_modules/antd/lib/tag/index.js");
/* harmony import */ var antd_lib_tag__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(antd_lib_tag__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var antd_lib_select__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! antd/lib/select */ "./node_modules/antd/lib/select/index.js");
/* harmony import */ var antd_lib_select__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(antd_lib_select__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @emotion/core */ "./node_modules/@emotion/core/dist/core.browser.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_13__);














function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



// import { Link } from 'Config/routes'
var Option = antd_lib_select__WEBPACK_IMPORTED_MODULE_11___default.a.Option;

var _ref =  false ? undefined : {
  name: "1fygg7s",
  styles: "border-radius:8px;border-top:4px solid rgb(24,144,255);box-shadow:1px 4px 15px rgba(24,144,255,0.1);@media(max-width:700px){min-width:77vw;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxEVENcXFByb2plY3QgUmVhY3RcXE1BUktJUi1GRVxcYXBsaWthc2ktMVxcY29tcG9uZW50c1xcY29udGFpbmVyc1xcbWFzdGVyRGF0YVxcdmVoaWNsZVR5cGVcXGluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4RndCIiwiZmlsZSI6IkQ6XFxEVENcXFByb2plY3QgUmVhY3RcXE1BUktJUi1GRVxcYXBsaWthc2ktMVxcY29tcG9uZW50c1xcY29udGFpbmVyc1xcbWFzdGVyRGF0YVxcdmVoaWNsZVR5cGVcXGluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwge0NvbXBvbmVudH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnXHJcbmltcG9ydCB7IFRhYmxlLCBDYXJkLCBCdXR0b24sIFRhZywgUm93LCBDb2wsIFRvb2x0aXAsIERpdmlkZXIsIE1vZGFsLCBGb3JtLCBJbnB1dCwgU2VsZWN0IH0gZnJvbSAnYW50ZCdcclxuLy8gaW1wb3J0IHsgTGluayB9IGZyb20gJ0NvbmZpZy9yb3V0ZXMnXHJcbmNvbnN0IE9wdGlvbiA9IFNlbGVjdC5PcHRpb25cclxuXHJcbmNsYXNzIFZlaGljbGVUeXBlIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgc3RhdGUgPSB7XHJcbiAgICBsb2FkaW5nOiBmYWxzZSxcclxuICAgIHZpc2libGU6IGZhbHNlLFxyXG4gIH1cclxuXHJcbiAgc2hvd01vZGFsID0gKCkgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlT2sgPSAoKSA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogdHJ1ZSB9KVxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkaW5nOiBmYWxzZSwgdmlzaWJsZTogZmFsc2UgfSlcclxuICAgIH0sIDMwMDApXHJcbiAgfVxyXG5cclxuICBoYW5kbGVDYW5jZWwgPSAoKSA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHsgdmlzaWJsZTogZmFsc2UgfSlcclxuICB9XHJcblxyXG4gIHJlbmRlcigpe1xyXG4gICAgY29uc3QgeyB2aXNpYmxlLCBsb2FkaW5nIH0gPSB0aGlzLnN0YXRlXHJcblxyXG4gICAgY29uc3QgY29sdW1ucyA9IFt7XHJcbiAgICAgIHRpdGxlOiAnTm8nLFxyXG4gICAgICBkYXRhSW5kZXg6ICdubydcclxuICAgIH0sIHtcclxuICAgICAgdGl0bGU6ICdKZW5pcyBLZW5kYXJhYW4nLFxyXG4gICAgICBkYXRhSW5kZXg6ICdqZW5pc0tlbmRhcmFhbidcclxuICAgIH0sIHtcclxuICAgICAgdGl0bGU6ICdTdGF0dXMnLFxyXG4gICAgICBkYXRhSW5kZXg6ICdzdGF0dXMnLFxyXG4gICAgICByZW5kZXI6IHN0YXR1cyA9PiAoXHJcbiAgICAgICAgPHNwYW4+XHJcbiAgICAgICAgICB7c3RhdHVzLm1hcChpdGVtID0+IHtcclxuICAgICAgICAgICAgbGV0IGNvbG9yID0gaXRlbS5sZW5ndGggPiA1ID8gJ2dlZWtibHVlJyA6ICdncmVlbidcclxuICAgICAgICAgICAgaWYgKGl0ZW0gPT09ICdZZXMnKSB7XHJcbiAgICAgICAgICAgICAgY29sb3IgPSAnZ3JlZW4nXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgY29sb3IgPSAncmVkJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiA8VGFnIGNvbG9yPXtjb2xvcn0ga2V5PXtpdGVtfT57aXRlbS50b1VwcGVyQ2FzZSgpfTwvVGFnPlxyXG4gICAgICAgICAgfSl9XHJcbiAgICAgICAgPC9zcGFuPlxyXG4gICAgICApXHJcbiAgICB9LCB7XHJcbiAgICAgIHRpdGxlOiAnQWtzaScsIGRhdGFJbmRleDogJycsIGtleTogJ3gnLCByZW5kZXI6ICgpID0+IChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgPFRvb2x0aXAgcGxhY2VtZW50PVwiYm90dG9tXCIgdGl0bGU9XCJFZGl0XCI+XHJcbiAgICAgICAgICAgIDxCdXR0b24gaWNvbj1cImVkaXRcIiB0eXBlPVwicHJpbWFyeVwiIGdob3N0Lz4gXHJcbiAgICAgICAgICA8L1Rvb2x0aXA+XHJcbiAgICAgICAgICA8RGl2aWRlciB0eXBlPVwidmVydGljYWxcIiAvPlxyXG4gICAgICAgICAgPFRvb2x0aXAgcGxhY2VtZW50PVwiYm90dG9tXCIgdGl0bGU9XCJIYXB1c1wiPlxyXG4gICAgICAgICAgICA8QnV0dG9uIGljb249XCJkZWxldGVcIiB0eXBlPVwiZGFuZ2VyXCIgZ2hvc3QvPlxyXG4gICAgICAgICAgPC9Ub29sdGlwPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICApXHJcbiAgICB9XVxyXG4gICAgXHJcbiAgICBjb25zdCBkYXRhID0gW3tcclxuICAgICAga2V5OiAnMScsXHJcbiAgICAgIG5vOiAnMScsXHJcbiAgICAgIGplbmlzS2VuZGFyYWFuOiAnUm9kYSA0JyxcclxuICAgICAgc3RhdHVzOiBbJ1llcyddXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogJzInLFxyXG4gICAgICBubzogJzInLFxyXG4gICAgICBqZW5pc0tlbmRhcmFhbjogJ1JvZGEgMicsXHJcbiAgICAgIHN0YXR1czogWydZZXMnXVxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6ICczJyxcclxuICAgICAgbm86ICczJyxcclxuICAgICAgamVuaXNLZW5kYXJhYW46ICdSb2RhIDIgPCAyNTBjYycsXHJcbiAgICAgIHN0YXR1czogWydObyddXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogJzQnLFxyXG4gICAgICBubzogJzQnLFxyXG4gICAgICBqZW5pc0tlbmRhcmFhbjogJ1JvZGEgNCcsXHJcbiAgICAgIHN0YXR1czogWydZZXMnXVxyXG4gICAgfV1cclxuXHJcbiAgICByZXR1cm4oXHJcbiAgICAgIDxSb3c+XHJcbiAgICAgICAgPENvbCBzcGFuPXsxNH0+XHJcbiAgICAgICAgICA8Q2FyZCBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xyXG4gICAgICAgICAgICBib3JkZXItdG9wOiA0cHggc29saWQgcmdiKDI0LCAxNDQsIDI1NSk7XHJcbiAgICAgICAgICAgIGJveC1zaGFkb3c6IDFweCA0cHggMTVweCByZ2JhKDI0LCAxNDQsIDI1NSwgMC4xKTtcclxuICAgICAgICAgICAgQG1lZGlhKG1heC13aWR0aDogNzAwcHgpIHtcclxuICAgICAgICAgICAgICAgIG1pbi13aWR0aDogNzd2dztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfT5cclxuICAgICAgICAgICAgPGRpdiBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4OyBcclxuICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kOyBcclxuICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxZW07IFxyXG4gICAgICAgICAgICAgIGJ1dHRvbiB7IFxyXG4gICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMWVtOyBcclxuICAgICAgICAgICAgICAmOmxhc3Qtb2YtdHlwZXtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMDtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfWB9PlxyXG4gICAgICAgICAgICAgIDxUb29sdGlwIHBsYWNlbWVudD1cImJvdHRvbVwiIHRpdGxlPVwiRXhwb3J0IEV4Y2VsXCI+XHJcbiAgICAgICAgICAgICAgICA8QnV0dG9uIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2RkZDtcclxuICAgICAgICAgICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6IGdyZWVuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBpbWcge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyMHB4O1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBgfT5cclxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCIvc3RhdGljL2ljb25zL2V4Y2VsLnBuZ1wiIC8+XHJcbiAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICA8L1Rvb2x0aXA+XHJcbiAgICAgICAgICAgICAgPFRvb2x0aXAgcGxhY2VtZW50PVwiYm90dG9tXCIgdGl0bGU9XCJQcmludFwiPlxyXG4gICAgICAgICAgICAgICAgPEJ1dHRvbiBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XHJcbiAgICAgICAgICAgICAgICAmOmhvdmVyIHtcclxuICAgICAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiBncmVlbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgaW1nIHtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjBweDtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYH0+XHJcbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiL3N0YXRpYy9pY29ucy9wcmludC5wbmdcIiAvPlxyXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgPC9Ub29sdGlwPlxyXG4gICAgICAgICAgICAgIDxCdXR0b24gdHlwZT1cInByaW1hcnlcIiBvbkNsaWNrPXt0aGlzLnNob3dNb2RhbH0+XHJcbiAgICAgICAgICAgICAgICBUYW1iYWhcclxuICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuXHJcbiAgICAgICAgICAgICAgPE1vZGFsXHJcbiAgICAgICAgICAgICAgICB2aXNpYmxlPXt2aXNpYmxlfVxyXG4gICAgICAgICAgICAgICAgdGl0bGU9XCJUaXRsZVwiXHJcbiAgICAgICAgICAgICAgICBvbk9rPXt0aGlzLmhhbmRsZU9rfVxyXG4gICAgICAgICAgICAgICAgb25DYW5jZWw9e3RoaXMuaGFuZGxlQ2FuY2VsfVxyXG4gICAgICAgICAgICAgICAgZm9vdGVyPXtbXHJcbiAgICAgICAgICAgICAgICAgIDxCdXR0b24ga2V5PVwiYmFja1wiIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2FuY2VsfT5CYXRhbDwvQnV0dG9uPixcclxuICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBrZXk9XCJzdWJtaXRcIiB0eXBlPVwicHJpbWFyeVwiIGxvYWRpbmc9e2xvYWRpbmd9IG9uQ2xpY2s9e3RoaXMuaGFuZGxlT2t9PlxyXG4gICAgICAgICAgICAgICAgICAgIFNpbXBhblxyXG4gICAgICAgICAgICAgICAgICA8L0J1dHRvbj4sXHJcbiAgICAgICAgICAgICAgICBdfVxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxGb3JtIGNzcz17Y3NzYGRpc3BsYXk6IGdyaWQ7IGdyaWQtZ2FwOiAxZW07YH0+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXtjc3NgZGlzcGxheTogZ3JpZDsgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgM2ZyOyBhbGlnbi1pdGVtczpjZW50ZXI7YH0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNzcz17Y3NzYG1hcmdpbi1yaWdodDogMWVtO2B9PkplbmlzIEtlbmRhcmFhbjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPElucHV0IC8+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17Y3NzYGRpc3BsYXk6IGdyaWQ7IGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDNmcjsgYWxpZ24taXRlbXM6Y2VudGVyO2B9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjc3M9e2Nzc2BtYXJnaW4tcmlnaHQ6IDFlbTtgfT5TdGF0dXM8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWxlY3RcclxuICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiLSBQaWxpaCBTdGF0dXMgLVwiXHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cInByaWFcIj5Ba3RpZjwvT3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cIndhbml0YVwiPlRpZGFrIEFrdGlmPC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9Gb3JtPlxyXG4gICAgICAgICAgICAgIDwvTW9kYWw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNzcz17Y3NzYCAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBAbWVkaWEobWF4LXdpZHRoOiA3MDBweCl7XHJcbiAgICAgICAgICAgICAgICBtaW4td2lkdGg6IDI1MHB4OyBcclxuICAgICAgICAgICAgICAgIG92ZXJmbG93LXg6IGF1dG87XHJcbiAgICAgICAgICAgICAgfWB9PlxyXG4gICAgICAgICAgICAgIDxUYWJsZSBjb2x1bW5zPXtjb2x1bW5zfSBkYXRhU291cmNlPXtkYXRhfSAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvQ2FyZD5cclxuICAgICAgICA8L0NvbD5cclxuICAgICAgPC9Sb3c+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBWZWhpY2xlVHlwZSJdfQ== */"
};

var _ref2 =  false ? undefined : {
  name: "1v3tq2h",
  styles: "display:flex;justify-content:flex-end;margin-bottom:1em;button{margin-right:1em;&:last-of-type{margin-right:0;}}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref3 =  false ? undefined : {
  name: "y1jc3m",
  styles: "border:1px solid #ddd;&:hover{border-color:green;}img{width:20px;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref4 =  false ? undefined : {
  name: "y1jc3m",
  styles: "border:1px solid #ddd;&:hover{border-color:green;}img{width:20px;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref5 =  false ? undefined : {
  name: "aqziur",
  styles: "display:grid;grid-gap:1em;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref6 =  false ? undefined : {
  name: "18dv2ey",
  styles: "display:grid;grid-template-columns:1fr 3fr;align-items:center;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref7 =  false ? undefined : {
  name: "1dk30lc",
  styles: "margin-right:1em;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref8 =  false ? undefined : {
  name: "18dv2ey",
  styles: "display:grid;grid-template-columns:1fr 3fr;align-items:center;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref9 =  false ? undefined : {
  name: "1dk30lc",
  styles: "margin-right:1em;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref10 =  false ? undefined : {
  name: "1rqpsdp",
  styles: "@media(max-width:700px){min-width:250px;overflow-x:auto;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var VehicleType =
/*#__PURE__*/
function (_Component) {
  _inherits(VehicleType, _Component);

  function VehicleType() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, VehicleType);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(VehicleType)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      loading: false,
      visible: false
    });

    _defineProperty(_assertThisInitialized(_this), "showModal", function () {
      _this.setState({
        visible: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleOk", function () {
      _this.setState({
        loading: true
      });

      setTimeout(function () {
        _this.setState({
          loading: false,
          visible: false
        });
      }, 3000);
    });

    _defineProperty(_assertThisInitialized(_this), "handleCancel", function () {
      _this.setState({
        visible: false
      });
    });

    return _this;
  }

  _createClass(VehicleType, [{
    key: "render",
    value: function render() {
      var _this$state = this.state,
          visible = _this$state.visible,
          loading = _this$state.loading;
      var columns = [{
        title: 'No',
        dataIndex: 'no'
      }, {
        title: 'Jenis Kendaraan',
        dataIndex: 'jenisKendaraan'
      }, {
        title: 'Status',
        dataIndex: 'status',
        render: function render(status) {
          return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])("span", null, status.map(function (item) {
            var color = item.length > 5 ? 'geekblue' : 'green';

            if (item === 'Yes') {
              color = 'green';
            } else {
              color = 'red';
            }

            return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_tag__WEBPACK_IMPORTED_MODULE_10___default.a, {
              color: color,
              key: item
            }, item.toUpperCase());
          }));
        }
      }, {
        title: 'Aksi',
        dataIndex: '',
        key: 'x',
        render: function render() {
          return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])("div", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_8___default.a, {
            placement: "bottom",
            title: "Edit"
          }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_9___default.a, {
            icon: "edit",
            type: "primary",
            ghost: true
          })), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_divider__WEBPACK_IMPORTED_MODULE_7___default.a, {
            type: "vertical"
          }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_8___default.a, {
            placement: "bottom",
            title: "Hapus"
          }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_9___default.a, {
            icon: "delete",
            type: "danger",
            ghost: true
          })));
        }
      }];
      var data = [{
        key: '1',
        no: '1',
        jenisKendaraan: 'Roda 4',
        status: ['Yes']
      }, {
        key: '2',
        no: '2',
        jenisKendaraan: 'Roda 2',
        status: ['Yes']
      }, {
        key: '3',
        no: '3',
        jenisKendaraan: 'Roda 2 < 250cc',
        status: ['No']
      }, {
        key: '4',
        no: '4',
        jenisKendaraan: 'Roda 4',
        status: ['Yes']
      }];
      return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_row__WEBPACK_IMPORTED_MODULE_0___default.a, null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_col__WEBPACK_IMPORTED_MODULE_1___default.a, {
        span: 14
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_card__WEBPACK_IMPORTED_MODULE_2___default.a, {
        css: _ref
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])("div", {
        css: _ref2
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_8___default.a, {
        placement: "bottom",
        title: "Export Excel"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_9___default.a, {
        css: _ref3
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])("img", {
        src: "/static/icons/excel.png"
      }))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_8___default.a, {
        placement: "bottom",
        title: "Print"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_9___default.a, {
        css: _ref4
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])("img", {
        src: "/static/icons/print.png"
      }))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_9___default.a, {
        type: "primary",
        onClick: this.showModal
      }, "Tambah"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_modal__WEBPACK_IMPORTED_MODULE_4___default.a, {
        visible: visible,
        title: "Title",
        onOk: this.handleOk,
        onCancel: this.handleCancel,
        footer: [Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_9___default.a, {
          key: "back",
          onClick: this.handleCancel
        }, "Batal"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_9___default.a, {
          key: "submit",
          type: "primary",
          loading: loading,
          onClick: this.handleOk
        }, "Simpan")]
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_form__WEBPACK_IMPORTED_MODULE_5___default.a, {
        css: _ref5
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])("div", {
        css: _ref6
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])("label", {
        css: _ref7
      }, "Jenis Kendaraan"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_input__WEBPACK_IMPORTED_MODULE_6___default.a, null)), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])("div", {
        css: _ref8
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])("label", {
        css: _ref9
      }, "Status"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_select__WEBPACK_IMPORTED_MODULE_11___default.a, {
        placeholder: "- Pilih Status -"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(Option, {
        value: "pria"
      }, "Aktif"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(Option, {
        value: "wanita"
      }, "Tidak Aktif")))))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])("div", {
        css: _ref10
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_table__WEBPACK_IMPORTED_MODULE_3___default.a, {
        columns: columns,
        dataSource: data
      })))));
    }
  }]);

  return VehicleType;
}(react__WEBPACK_IMPORTED_MODULE_13__["Component"]);

/* harmony default export */ __webpack_exports__["default"] = (VehicleType);

/***/ })

})
//# sourceMappingURL=userType.js.874b0bdd5a6d5c4bfb75.hot-update.js.map