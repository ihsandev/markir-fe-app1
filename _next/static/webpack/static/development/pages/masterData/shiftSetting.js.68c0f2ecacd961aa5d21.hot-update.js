webpackHotUpdate("static\\development\\pages\\masterData\\shiftSetting.js",{

/***/ "./components/containers/masterData/shiftSetting/index.jsx":
/*!*****************************************************************!*\
  !*** ./components/containers/masterData/shiftSetting/index.jsx ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var antd_lib_row__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antd/lib/row */ "./node_modules/antd/lib/row/index.js");
/* harmony import */ var antd_lib_row__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antd_lib_row__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd_lib_col__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd/lib/col */ "./node_modules/antd/lib/col/index.js");
/* harmony import */ var antd_lib_col__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd_lib_col__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var antd_lib_card__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! antd/lib/card */ "./node_modules/antd/lib/card/index.js");
/* harmony import */ var antd_lib_card__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(antd_lib_card__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var antd_lib_table__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! antd/lib/table */ "./node_modules/antd/lib/table/index.js");
/* harmony import */ var antd_lib_table__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(antd_lib_table__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! antd/lib/modal */ "./node_modules/antd/lib/modal/index.js");
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(antd_lib_modal__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var antd_lib_form__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! antd/lib/form */ "./node_modules/antd/lib/form/index.js");
/* harmony import */ var antd_lib_form__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(antd_lib_form__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var antd_lib_switch__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! antd/lib/switch */ "./node_modules/antd/lib/switch/index.js");
/* harmony import */ var antd_lib_switch__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(antd_lib_switch__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var antd_lib_time_picker__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! antd/lib/time-picker */ "./node_modules/antd/lib/time-picker/index.js");
/* harmony import */ var antd_lib_time_picker__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(antd_lib_time_picker__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! antd/lib/tooltip */ "./node_modules/antd/lib/tooltip/index.js");
/* harmony import */ var antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! antd/lib/button */ "./node_modules/antd/lib/button/index.js");
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(antd_lib_button__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var antd_lib_tag__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! antd/lib/tag */ "./node_modules/antd/lib/tag/index.js");
/* harmony import */ var antd_lib_tag__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(antd_lib_tag__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var antd_lib_select__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! antd/lib/select */ "./node_modules/antd/lib/select/index.js");
/* harmony import */ var antd_lib_select__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(antd_lib_select__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @emotion/core */ "./node_modules/@emotion/core/dist/core.browser.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_14__);














function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




var Option = antd_lib_select__WEBPACK_IMPORTED_MODULE_11___default.a.Option;

var _ref =  false ? undefined : {
  name: "1fygg7s",
  styles: "border-radius:8px;border-top:4px solid rgb(24,144,255);box-shadow:1px 4px 15px rgba(24,144,255,0.1);@media(max-width:700px){min-width:77vw;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref2 =  false ? undefined : {
  name: "1v3tq2h",
  styles: "display:flex;justify-content:flex-end;margin-bottom:1em;button{margin-right:1em;&:last-of-type{margin-right:0;}}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref3 =  false ? undefined : {
  name: "y1jc3m",
  styles: "border:1px solid #ddd;&:hover{border-color:green;}img{width:20px;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref4 =  false ? undefined : {
  name: "y1jc3m",
  styles: "border:1px solid #ddd;&:hover{border-color:green;}img{width:20px;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref5 =  false ? undefined : {
  name: "aqziur",
  styles: "display:grid;grid-gap:1em;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref6 =  false ? undefined : {
  name: "70qvj9",
  styles: "display:flex;align-items:center;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref7 =  false ? undefined : {
  name: "4x2rqs",
  styles: "margin-right:1.5em;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref8 =  false ? undefined : {
  name: "1dk30lc",
  styles: "margin-right:1em;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref9 =  false ? undefined : {
  name: "4x2rqs",
  styles: "margin-right:1.5em;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref10 =  false ? undefined : {
  name: "1dk30lc",
  styles: "margin-right:1em;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref11 =  false ? undefined : {
  name: "1dk30lc",
  styles: "margin-right:1em;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var ShiftSetting =
/*#__PURE__*/
function (_Component) {
  _inherits(ShiftSetting, _Component);

  function ShiftSetting() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ShiftSetting);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ShiftSetting)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      loading: false,
      visible: false
    });

    _defineProperty(_assertThisInitialized(_this), "showModal", function () {
      _this.setState({
        visible: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleOk", function () {
      _this.setState({
        loading: true
      });

      setTimeout(function () {
        _this.setState({
          loading: false,
          visible: false
        });
      }, 3000);
    });

    _defineProperty(_assertThisInitialized(_this), "handleCancel", function () {
      _this.setState({
        visible: false
      });
    });

    return _this;
  }

  _createClass(ShiftSetting, [{
    key: "render",
    value: function render() {
      var _this$state = this.state,
          visible = _this$state.visible,
          loading = _this$state.loading;
      var columns = [{
        title: 'Nama Shift',
        dataIndex: 'nama'
      }, {
        title: 'Waktu',
        dataIndex: 'waktu',
        defaultSortOrder: 'descend',
        sorter: function sorter(a, b) {
          return a.nik - b.nik;
        }
      }, {
        title: 'Status Aktif',
        dataIndex: 'status',
        render: function render(status) {
          return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])("span", null, status.map(function (item) {
            var color = item.length > 5 ? 'geekblue' : 'green';

            if (item === 'Yes') {
              color = 'green';
            } else {
              color = 'red';
            }

            return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_tag__WEBPACK_IMPORTED_MODULE_10___default.a, {
              color: color,
              key: item
            }, item.toUpperCase());
          }));
        }
      }];
      var data = [{
        key: '1',
        nama: 'Shift 1',
        waktu: '00.00 - 06.00',
        status: ['No']
      }, {
        key: '2',
        nama: 'Shift 2',
        waktu: '06.00 - 12.00',
        status: ['Yes']
      }, {
        key: '3',
        nama: 'Shift 3',
        waktu: '12.00 - 18.00',
        status: ['Yes']
      }, {
        key: '4',
        nama: 'Shift 4',
        waktu: '18.00 - 24.00',
        status: ['Yes']
      }];
      return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_row__WEBPACK_IMPORTED_MODULE_0___default.a, null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_col__WEBPACK_IMPORTED_MODULE_1___default.a, {
        span: 14
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_card__WEBPACK_IMPORTED_MODULE_2___default.a, {
        css: _ref
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])("div", {
        css: _ref2
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_8___default.a, {
        placement: "bottom",
        title: "Export Excel"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_9___default.a, {
        css: _ref3
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])("img", {
        src: "/static/icons/excel.png"
      }))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_8___default.a, {
        placement: "bottom",
        title: "Print"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_9___default.a, {
        css: _ref4
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])("img", {
        src: "/static/icons/print.png"
      }))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_9___default.a, {
        type: "primary",
        onClick: this.showModal
      }, "Tambah"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_modal__WEBPACK_IMPORTED_MODULE_4___default.a, {
        visible: visible,
        title: "Title",
        onOk: this.handleOk,
        onCancel: this.handleCancel,
        footer: [Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_9___default.a, {
          key: "back",
          onClick: this.handleCancel
        }, "Batal"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_9___default.a, {
          key: "submit",
          type: "primary",
          loading: loading,
          onClick: this.handleOk
        }, "Simpan")]
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_form__WEBPACK_IMPORTED_MODULE_5___default.a, {
        css: _ref5
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])("div", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_select__WEBPACK_IMPORTED_MODULE_11___default.a, {
        showSearch: true,
        placeholder: "- Pilih Shift -"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(Option, {
        value: "pria"
      }, "Shift I"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(Option, {
        value: "wanita"
      }, "Shift II"))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])("div", {
        css: _ref6
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])("div", {
        css: _ref7
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])("label", {
        css: _ref8
      }, "In"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_time_picker__WEBPACK_IMPORTED_MODULE_7___default.a, {
        defaultOpenValue: moment__WEBPACK_IMPORTED_MODULE_14___default()('00:00:00', 'HH:mm:ss')
      })), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])("div", {
        css: _ref9
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])("label", {
        css: _ref10
      }, "Out"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_time_picker__WEBPACK_IMPORTED_MODULE_7___default.a, {
        defaultOpenValue: moment__WEBPACK_IMPORTED_MODULE_14___default()('00:00:00', 'HH:mm:ss')
      })), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])("div", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])("label", {
        css: _ref11
      }, "Status "), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_switch__WEBPACK_IMPORTED_MODULE_6___default.a, {
        defaultChecked: true
      })))))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(antd_lib_table__WEBPACK_IMPORTED_MODULE_3___default.a, {
        columns: columns,
        dataSource: data
      }))));
    }
  }]);

  return ShiftSetting;
}(react__WEBPACK_IMPORTED_MODULE_13__["Component"]);

/* harmony default export */ __webpack_exports__["default"] = (ShiftSetting);

/***/ })

})
//# sourceMappingURL=shiftSetting.js.68c0f2ecacd961aa5d21.hot-update.js.map