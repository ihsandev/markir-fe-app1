webpackHotUpdate("static\\development\\pages\\listOfEmployee.js",{

/***/ "./components/containers/listOfEmployee/index.jsx":
/*!********************************************************!*\
  !*** ./components/containers/listOfEmployee/index.jsx ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antd/lib/modal */ "./node_modules/antd/lib/modal/index.js");
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antd_lib_modal__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd_lib_card__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd/lib/card */ "./node_modules/antd/lib/card/index.js");
/* harmony import */ var antd_lib_card__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd_lib_card__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var antd_lib_table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! antd/lib/table */ "./node_modules/antd/lib/table/index.js");
/* harmony import */ var antd_lib_table__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(antd_lib_table__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var antd_lib_popconfirm__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! antd/lib/popconfirm */ "./node_modules/antd/lib/popconfirm/index.js");
/* harmony import */ var antd_lib_popconfirm__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(antd_lib_popconfirm__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var antd_lib_divider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! antd/lib/divider */ "./node_modules/antd/lib/divider/index.js");
/* harmony import */ var antd_lib_divider__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(antd_lib_divider__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! antd/lib/tooltip */ "./node_modules/antd/lib/tooltip/index.js");
/* harmony import */ var antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! antd/lib/button */ "./node_modules/antd/lib/button/index.js");
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(antd_lib_button__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! antd/lib/message */ "./node_modules/antd/lib/message/index.js");
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(antd_lib_message__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var antd_lib_icon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! antd/lib/icon */ "./node_modules/antd/lib/icon/index.js");
/* harmony import */ var antd_lib_icon__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(antd_lib_icon__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! antd/lib/input */ "./node_modules/antd/lib/input/index.js");
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(antd_lib_input__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @emotion/core */ "./node_modules/@emotion/core/dist/core.browser.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var react_highlight_words__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! react-highlight-words */ "./node_modules/react-highlight-words/dist/main.js");
/* harmony import */ var react_highlight_words__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(react_highlight_words__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var Config_routes__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! Config/routes */ "./config/routes.js");
/* harmony import */ var Config_routes__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(Config_routes__WEBPACK_IMPORTED_MODULE_13__);












function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






var _ref =  false ? undefined : {
  name: "dtjl5c",
  styles: "border-color:#ffc30e;color:#ffc30e;&:hover{border-color:#ffc30e;color:#ffc30e;}&:focus{border-color:#ffc30e;color:#ffc30e;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref2 =  false ? undefined : {
  name: "1fygg7s",
  styles: "border-radius:8px;border-top:4px solid rgb(24,144,255);box-shadow:1px 4px 15px rgba(24,144,255,0.1);@media(max-width:700px){min-width:77vw;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref3 =  false ? undefined : {
  name: "1x3ijnx",
  styles: "display:flex;justify-content:flex-end;margin-bottom:1em;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref4 =  false ? undefined : {
  name: "n7viab",
  styles: "min-width:250px;overflow-x:auto;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref5 =  false ? undefined : {
  name: "1pmm33",
  styles: "display:grid;grid-template-columns:1fr 2fr;grid-column-gap:1em;justify-items:center;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref6 =  false ? undefined : {
  name: "13x3ctw",
  styles: "height:150px;width:150px;border-radius:50%;position:relative;background-size:cover;background-repeat:no-repeat;background-image:url('/static/defaultplaceholder.png');",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref7 =  false ? undefined : {
  name: "1sehodu",
  styles: "display:grid;grid-row-gap:2em;.detailContent{display:grid;grid-template-columns:1fr 2fr;grid-column-gap:1em;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var ListOfEmployee =
/*#__PURE__*/
function (_Component) {
  _inherits(ListOfEmployee, _Component);

  function ListOfEmployee() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ListOfEmployee);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ListOfEmployee)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      loading: false,
      detailVisible: false,
      editVisible: false
    });

    _defineProperty(_assertThisInitialized(_this), "showModal", function (keyword) {
      if (keyword === 'detail') {
        _this.setState({
          detailVisible: true
        });
      } else if (keyword === 'edit') {
        _this.setState({
          editVisible: true
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleOk", function (keyword) {
      if (keyword === 'detail') {
        _this.setState({
          loading: true
        });

        setTimeout(function () {
          _this.setState({
            loading: false,
            detailVisible: false
          });
        }, 3000);
      } else if (keyword === 'edit') {
        _this.setState({
          loading: true
        });

        setTimeout(function () {
          _this.setState({
            loading: false,
            editVisible: false
          });
        }, 3000);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleCancel", function (keyword) {
      if (keyword === 'detail') {
        _this.setState({
          detailVisible: false
        });
      } else if (keyword === 'edit') {
        _this.setState({
          editVisible: false
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getColumnSearchProps", function (dataIndex) {
      return {
        filterDropdown: function filterDropdown(_ref8) {
          var setSelectedKeys = _ref8.setSelectedKeys,
              selectedKeys = _ref8.selectedKeys,
              confirm = _ref8.confirm,
              clearFilters = _ref8.clearFilters;
          return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
            style: {
              padding: 8
            }
          }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_input__WEBPACK_IMPORTED_MODULE_9___default.a, {
            ref: function ref(node) {
              _this.searchInput = node;
            },
            placeholder: "Search ".concat(dataIndex),
            value: selectedKeys[0],
            onChange: function onChange(e) {
              return setSelectedKeys(e.target.value ? [e.target.value] : []);
            },
            onPressEnter: function onPressEnter() {
              return _this.handleSearch(selectedKeys, confirm);
            },
            style: {
              width: 188,
              marginBottom: 8,
              display: 'block'
            }
          }));
        },
        filterIcon: function filterIcon(filtered) {
          return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_icon__WEBPACK_IMPORTED_MODULE_8___default.a, {
            type: "search",
            style: {
              color: filtered ? '#1890ff' : undefined
            }
          });
        },
        onFilter: function onFilter(value, record) {
          return record[dataIndex].toString().toLowerCase().includes(value.toLowerCase());
        },
        onFilterDropdownVisibleChange: function onFilterDropdownVisibleChange(visible) {
          if (visible) {
            setTimeout(function () {
              return _this.searchInput.select();
            });
          }
        },
        render: function render(text) {
          return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(react_highlight_words__WEBPACK_IMPORTED_MODULE_12___default.a, {
            highlightStyle: {
              backgroundColor: '#ffc069',
              padding: 0
            },
            searchWords: [_this.state.searchText],
            autoEscape: true,
            textToHighlight: text.toString()
          });
        }
      };
    });

    _defineProperty(_assertThisInitialized(_this), "handleSearch", function (selectedKeys, confirm) {
      confirm();

      _this.setState({
        searchText: selectedKeys[0]
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleReset", function (clearFilters) {
      clearFilters();

      _this.setState({
        searchText: ''
      });
    });

    return _this;
  }

  _createClass(ListOfEmployee, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var text = 'Yakin ingin hapus?';

      function confirm() {
        antd_lib_message__WEBPACK_IMPORTED_MODULE_7___default.a.info('Clicked on Yes.');
      }

      var _this$state = this.state,
          detailVisible = _this$state.detailVisible,
          editVisible = _this$state.editVisible,
          loading = _this$state.loading;
      var columns = [_objectSpread({
        title: 'Nama',
        dataIndex: 'nama'
      }, this.getColumnSearchProps('nama')), _objectSpread({
        title: 'Nik',
        dataIndex: 'nik',
        defaultSortOrder: 'descend',
        sorter: function sorter(a, b) {
          return a.nik - b.nik;
        }
      }, this.getColumnSearchProps('nik')), _objectSpread({
        title: 'Jabatan',
        dataIndex: 'jabatan'
      }, this.getColumnSearchProps('jabatan')), _objectSpread({
        title: 'Shift',
        dataIndex: 'shift'
      }, this.getColumnSearchProps('shift')), {
        title: 'Aksi',
        dataIndex: '',
        key: 'x',
        render: function render() {
          return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_5___default.a, {
            placement: "bottom",
            title: "Edit"
          }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_6___default.a, {
            icon: "edit",
            css: _ref,
            ghost: true,
            onClick: function onClick() {
              return _this2.showModal('edit');
            }
          })), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_divider__WEBPACK_IMPORTED_MODULE_4___default.a, {
            type: "vertical"
          }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_5___default.a, {
            placement: "bottom",
            title: "Hapus"
          }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_popconfirm__WEBPACK_IMPORTED_MODULE_3___default.a, {
            placement: "top",
            title: text,
            onConfirm: confirm,
            okText: "Yes",
            cancelText: "No"
          }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_6___default.a, {
            icon: "delete",
            type: "danger",
            ghost: true
          }))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_divider__WEBPACK_IMPORTED_MODULE_4___default.a, {
            type: "vertical"
          }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_tooltip__WEBPACK_IMPORTED_MODULE_5___default.a, {
            placement: "bottom",
            title: "Detail"
          }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_6___default.a, {
            icon: "more",
            type: "primary",
            ghost: true,
            onClick: function onClick() {
              return _this2.showModal('detail');
            }
          })));
        }
      }];
      var data = [{
        key: '1',
        nama: 'John Brown',
        nik: 11112345,
        jabatan: 'Staf Kasir',
        shift: 'Shift 1'
      }, {
        key: '2',
        nama: 'Jim Green',
        nik: 11112346,
        jabatan: 'Staf Kasir',
        shift: 'Shift 2'
      }, {
        key: '3',
        nama: 'Koko Fork',
        nik: 11112346,
        jabatan: 'Staf Kasir',
        shift: 'Shift 3'
      }, {
        key: '4',
        nama: 'Lala Green',
        nik: 11112346,
        jabatan: 'Staf Kasir',
        shift: 'Shift 4'
      }];
      return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(react__WEBPACK_IMPORTED_MODULE_11___default.a.Fragment, null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("h2", null, "Daftar Karyawan")), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_card__WEBPACK_IMPORTED_MODULE_1___default.a, {
        css: _ref2
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        css: _ref3
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(Config_routes__WEBPACK_IMPORTED_MODULE_13__["Link"], {
        route: "addEmployee"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_6___default.a, {
        type: "primary"
      }, "Tambah Karyawan"))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        css: _ref4
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_table__WEBPACK_IMPORTED_MODULE_2___default.a, {
        columns: columns,
        dataSource: data
      }))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(antd_lib_modal__WEBPACK_IMPORTED_MODULE_0___default.a, {
        visible: detailVisible,
        title: "Detail",
        onOk: function onOk() {
          return _this2.handleOk('detail');
        },
        onCancel: function onCancel() {
          return _this2.handleCancel('detail');
        },
        footer: false,
        width: "700px"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        css: _ref5
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        css: _ref6,
        className: "photoEmployee"
      }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        css: _ref7
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        className: "detailContent"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, "Nama Lengkap"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("span", null, ":"), " Alifia Indra")), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        className: "detailContent"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, "NIK"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("span", null, ":"), " 1223344")), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        className: "detailContent"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, "Email"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("span", null, ":"), " example.mail.com")), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        className: "detailContent"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, "Jenis Kelamin"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("span", null, ":"), " Pria")), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        className: "detailContent"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, "Tempat/Tanggal Lahir"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("span", null, ":"), " Jakarta, 22 Maret 1993")), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        className: "detailContent"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, "No. Telepon"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("span", null, ":"), " 087676556458")), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        className: "detailContent"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, "Jabatan"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("span", null, ":"), " Staf Kasir")), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
        className: "detailContent"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, "Shift"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("label", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("span", null, ":"), " Shift I | 06.00 - 12.00"))))));
    }
  }]);

  return ListOfEmployee;
}(react__WEBPACK_IMPORTED_MODULE_11__["Component"]);

/* harmony default export */ __webpack_exports__["default"] = (ListOfEmployee);

/***/ })

})
//# sourceMappingURL=listOfEmployee.js.c3c2a646683814e88318.hot-update.js.map