webpackHotUpdate("static\\development\\pages\\dashboard.js",{

/***/ "./components/containers/dashboard/index.jsx":
/*!***************************************************!*\
  !*** ./components/containers/dashboard/index.jsx ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var antd_lib_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antd/lib/layout */ "./node_modules/antd/lib/layout/index.js");
/* harmony import */ var antd_lib_layout__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antd_lib_layout__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd/lib/modal */ "./node_modules/antd/lib/modal/index.js");
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd_lib_modal__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var antd_lib_card__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! antd/lib/card */ "./node_modules/antd/lib/card/index.js");
/* harmony import */ var antd_lib_card__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(antd_lib_card__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! antd/lib/button */ "./node_modules/antd/lib/button/index.js");
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(antd_lib_button__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/core */ "./node_modules/@emotion/core/dist/core.browser.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _incomeReport__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./incomeReport */ "./components/containers/dashboard/incomeReport.jsx");






function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





var _ref =  false ? undefined : {
  name: "138hbs8",
  styles: "background:#fff;border-radius:8px;border-top:4px solid rgb(24,144,255);box-shadow:1px 4px 15px rgba(24,144,255,0.1);",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxEVENcXFByb2plY3QgUmVhY3RcXE1BUktJUi1GRVxcYXBsaWthc2ktMVxcY29tcG9uZW50c1xcY29udGFpbmVyc1xcZGFzaGJvYXJkXFxpbmRleC5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUNtQiIsImZpbGUiOiJEOlxcRFRDXFxQcm9qZWN0IFJlYWN0XFxNQVJLSVItRkVcXGFwbGlrYXNpLTFcXGNvbXBvbmVudHNcXGNvbnRhaW5lcnNcXGRhc2hib2FyZFxcaW5kZXguanN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50fSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSdcclxuaW1wb3J0IHsgQ2FyZCwgTGF5b3V0LCBCdXR0b24sIE1vZGFsIH0gZnJvbSAnYW50ZCdcclxuaW1wb3J0IEluY29tZVJlcG9ydCBmcm9tICcuL2luY29tZVJlcG9ydCdcclxuXHJcbmNsYXNzIERhc2hib2FyZCBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gIHN0YXRlID0ge1xyXG4gICAgbG9hZGluZzogZmFsc2UsXHJcbiAgICB2aXNpYmxlOiBmYWxzZSxcclxuICB9XHJcblxyXG4gIHNob3dNb2RhbCA9ICgpID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGhhbmRsZU9rID0gKCkgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRpbmc6IHRydWUgfSlcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogZmFsc2UsIHZpc2libGU6IGZhbHNlIH0pXHJcbiAgICB9LCAzMDAwKVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlQ2FuY2VsID0gKCkgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IHZpc2libGU6IGZhbHNlIH0pXHJcbiAgfVxyXG5cclxuICByZW5kZXIoKXtcclxuXHJcbiAgICBjb25zdCB7IHZpc2libGUgfSA9IHRoaXMuc3RhdGVcclxuXHJcbiAgICBjb25zdCB0ZXMgPSBjc3NgXHJcbiAgICBiYWNrZ3JvdW5kOiAjZmZmO1xyXG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xyXG4gICAgYm9yZGVyLXRvcDogNHB4IHNvbGlkIHJnYigyNCwgMTQ0LCAyNTUpO1xyXG4gICAgYm94LXNoYWRvdzogMXB4IDRweCAxNXB4IHJnYmEoMjQsIDE0NCwgMjU1LCAwLjEpO1xyXG4gIGBcclxuXHJcbiAgICBjb25zdCBncmlkID0gY3NzYFxyXG4gICAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XHJcbiAgICAgIGdyaWQtZ2FwOiAyZW07XHJcbiAgICAgIEBtZWRpYShtYXgtd2lkdGg6IDc2OHB4KXtcclxuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcclxuICAgICAgfVxyXG4gICAgYFxyXG5cclxuICAgIGNvbnN0IGdyaWRWZWhpY2xlID0gY3NzYFxyXG4gICAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCg0LCAxZnIpO1xyXG4gICAgICBncmlkLWdhcDogMWVtO1xyXG4gICAgICBAbWVkaWEobWF4LXdpZHRoOiA3NjhweCl7XHJcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XHJcbiAgICAgIH1cclxuICAgIGBcclxuXHJcbiAgICBjb25zdCBjYXJkVmVoaWNsZSA9IGNzc2BcclxuICAgICAgZGlzcGxheTogZ3JpZDtcclxuICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMmZyO1xyXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICBoMSB7XHJcbiAgICAgICAgZm9udC1zaXplOiAxLjVlbTtcclxuICAgICAgICBjb2xvcjogIzk1OWVhYjtcclxuICAgICAgfVxyXG4gICAgICBoMiB7XHJcbiAgICAgICAgZm9udC1zaXplOiAxM3B4O1xyXG4gICAgICB9XHJcbiAgICAgIGltZyB7XHJcbiAgICAgICAgd2lkdGg6IDQwcHg7XHJcbiAgICAgICAgaGVpZ2h0OiA0MHB4O1xyXG4gICAgICB9XHJcbiAgICBgXHJcblxyXG4gICAgY29uc3QgY2FyZE1vbmV5ID0gY3NzYFxyXG4gICAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDJmciAzZnI7XHJcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgIHBhZGRpbmc6IDFlbTtcclxuICAgICAgaDEge1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMmVtO1xyXG4gICAgICAgIGNvbG9yOiAjOTU5ZWFiO1xyXG4gICAgICB9XHJcbiAgICAgIGltZyB7XHJcbiAgICAgICAgd2lkdGg6IDEwMHB4O1xyXG4gICAgICAgIGhlaWdodDogMTAwcHg7XHJcbiAgICAgIH1cclxuICAgICAgPiBkaXYge1xyXG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgYnV0dG9uIHtcclxuICAgICAgICAgIGp1c3RpZnktc2VsZjogZW5kOyBcclxuICAgICAgICAgIHRyYW5zaXRpb246IDAuM3MgIWltcG9ydGFudDtcclxuICAgICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgICBib3gtc2hhZG93OiAwcHggNXB4IDEwcHggcmdiYSgyNCwgMTQ0LCAyNTUsIDAuMikgIWltcG9ydGFudDtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0zcHgpICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgICB9IFxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBAbWVkaWEobWF4LXdpZHRoOiA3MDBweCkge1xyXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDJmcjtcclxuICAgICAgICBpbWcge1xyXG4gICAgICAgICAgd2lkdGg6IDYwcHg7XHJcbiAgICAgICAgICBoZWlnaHQ6IDYwcHhcclxuICAgICAgICB9XHJcbiAgICAgICAgaDEsaDIge1xyXG4gICAgICAgICAgZm9udC1zaXplOiAxZW07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICBgXHJcblxyXG4gICAgY29uc3Qgbm9taW5hbEluY29tZSA9IChcclxuICAgICAgPGRpdiBjc3M9eyBncmlkIH0+XHJcbiAgICAgICAgPENhcmQgYm9yZGVyZWQ9e2ZhbHNlfSBjc3M9eyB0ZXMgfT5cclxuICAgICAgICAgIDxkaXYgY3NzPXtjYXJkTW9uZXl9PlxyXG4gICAgICAgICAgICA8aW1nIHNyYz1cIi9zdGF0aWMvaWNvbnMvY2FzaC5wbmdcIiAvPlxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgIDxoMj5DYXNoPC9oMj5cclxuICAgICAgICAgICAgICA8aDE+UnAuIDEuMjM1LjAwMC4wMDA8L2gxPlxyXG4gICAgICAgICAgICAgIDxCdXR0b24gdHlwZT1cInByaW1hcnlcIiBnaG9zdCBvbkNsaWNrPXt0aGlzLnNob3dNb2RhbH0+RGV0YWlsPC9CdXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9DYXJkPlxyXG4gICAgICAgIDxDYXJkIGJvcmRlcmVkPXtmYWxzZX0gY3NzPXsgdGVzIH0+XHJcbiAgICAgICAgICA8ZGl2IGNzcz17Y2FyZE1vbmV5fT5cclxuICAgICAgICAgICAgPGltZyBzcmM9XCIvc3RhdGljL2ljb25zL25vbmNhc2gucG5nXCIgLz5cclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICA8aDI+Tm9uIENhc2g8L2gyPlxyXG4gICAgICAgICAgICAgIDxoMT5ScC4gMS4yMzUuMDAwLjAwMDwvaDE+XHJcbiAgICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPVwicHJpbWFyeVwiIGdob3N0IG9uQ2xpY2s9e3RoaXMuc2hvd01vZGFsfT5EZXRhaWw8L0J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L0NhcmQ+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG5cclxuICAgIGNvbnN0IG51bWJlck9mVmVoaWNsZSA9IChcclxuICAgICAgPGRpdiBjc3M9eyBncmlkVmVoaWNsZSB9PlxyXG4gICAgICAgIDxDYXJkIGJvcmRlcmVkPXtmYWxzZX0gY3NzPXsgdGVzIH0+XHJcbiAgICAgICAgICA8ZGl2IGNzcz17Y2FyZFZlaGljbGV9PlxyXG4gICAgICAgICAgICA8aW1nIHNyYz1cIi9zdGF0aWMvaWNvbnMvbW90b3IxLnBuZ1wiIC8+XHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgPGgyPk1vdG9yY3ljbGVzPC9oMj5cclxuICAgICAgICAgICAgICA8aDE+MC8xMDA8L2gxPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvQ2FyZD5cclxuICAgICAgICA8Q2FyZCBib3JkZXJlZD17ZmFsc2V9IGNzcz17IHRlcyB9PlxyXG4gICAgICAgICAgPGRpdiBjc3M9e2NhcmRWZWhpY2xlfT5cclxuICAgICAgICAgICAgPGltZyBzcmM9XCIvc3RhdGljL2ljb25zL2Nhci5wbmdcIiAvPlxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgIDxoMj5DYXI8L2gyPlxyXG4gICAgICAgICAgICAgIDxoMT4wLzEwMDwvaDE+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9DYXJkPlxyXG4gICAgICAgIDxDYXJkIGJvcmRlcmVkPXtmYWxzZX0gY3NzPXsgdGVzIH0+XHJcbiAgICAgICAgICA8ZGl2IGNzcz17Y2FyZFZlaGljbGV9PlxyXG4gICAgICAgICAgICA8aW1nIHNyYz1cIi9zdGF0aWMvaWNvbnMvbW90b3IucG5nXCIgLz5cclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICA8aDI+TW90b3JjeWNsZXMgJmd0OyAyNTBjYzwvaDI+XHJcbiAgICAgICAgICAgICAgPGgxPjAvMTAwPC9oMT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L0NhcmQ+XHJcbiAgICAgICAgPENhcmQgYm9yZGVyZWQ9e2ZhbHNlfSBjc3M9eyB0ZXMgfT5cclxuICAgICAgICAgIDxkaXYgY3NzPXtjYXJkVmVoaWNsZX0+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPVwiL3N0YXRpYy9pY29ucy9iaWdjYXIucG5nXCIgLz5cclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICA8aDI+QmlnIENhcjwvaDI+XHJcbiAgICAgICAgICAgICAgPGgxPjAvMTAwPC9oMT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L0NhcmQ+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG5cclxuICAgIGNvbnN0IG1vZGFsRGV0YWlsTW9uZXkgPSAoXHJcbiAgICAgIDxNb2RhbFxyXG4gICAgICAgIHZpc2libGU9e3Zpc2libGV9XHJcbiAgICAgICAgdGl0bGU9XCJEZXRhaWxcIlxyXG4gICAgICAgIG9uT2s9eygpID0+IHRoaXMuaGFuZGxlT2soJ2RldGFpbCcpfVxyXG4gICAgICAgIG9uQ2FuY2VsPXsoKSA9PiB0aGlzLmhhbmRsZUNhbmNlbCgnZGV0YWlsJyl9XHJcbiAgICAgICAgZm9vdGVyPXtbXHJcbiAgICAgICAgICA8QnV0dG9uIGtleT1cInN1Ym1pdFwiIHR5cGU9XCJwcmltYXJ5XCIgZ2hvc3Qgb25DbGljaz17KCk9PnRoaXMuaGFuZGxlT2soJ2VkaXQnKX0+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPVwic3RhdGljL2ljb25zL3ByaW50LnBuZ1wiIHdpZHRoPVwiMjBweFwiLz4gUHJpbnQgRGF0YVxyXG4gICAgICAgICAgPC9CdXR0b24+LFxyXG4gICAgICAgIF19XHJcbiAgICAgICAgd2lkdGg9XCI5MCVcIlxyXG4gICAgICA+XHJcbiAgICAgICAgPEluY29tZVJlcG9ydCAvPlxyXG4gICAgICA8L01vZGFsPlxyXG4gICAgKVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDw+XHJcbiAgICAgIDxMYXlvdXQgY3NzPXtjc3NgXHJcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcclxuICAgICAgICBncmlkLXJvdy1nYXA6IDFlbTtcclxuICAgICAgYH0+XHJcbiAgICAgICAgPENhcmQgdGl0bGU9XCJOT01JTkFMIElOQ09NRVwiIGJvcmRlcmVkPXtmYWxzZX0gdHlwZT1cImlubmVyXCI+XHJcbiAgICAgICAgICB7IG5vbWluYWxJbmNvbWUgfVxyXG4gICAgICAgIDwvQ2FyZD5cclxuICAgICAgICA8Q2FyZCB0aXRsZT1cIk5VTUJFUiBPRiBWRUhJQ0xFU1wiIGJvcmRlcmVkPXtmYWxzZX0gdHlwZT1cImlubmVyXCI+XHJcbiAgICAgICAgICB7IG51bWJlck9mVmVoaWNsZSB9XHJcbiAgICAgICAgPC9DYXJkPlxyXG4gICAgICAgIDxDYXJkIHRpdGxlPVwiSU5DT01FIFJFUE9SVFwiIGJvcmRlcmVkPXtmYWxzZX0gdHlwZT1cImlubmVyXCIgY3NzPXtjc3NgXHJcbiAgICAgICAgICBAbWVkaWEobWF4LXdpZHRoOiA3MDBweCl7XHJcbiAgICAgICAgICAgIG1pbi13aWR0aDogODB2dztcclxuICAgICAgICAgIH1cclxuICAgICAgICBgfT5cclxuICAgICAgICAgIDxkaXYgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIEBtZWRpYShtYXgtd2lkdGg6IDcwMHB4KSB7XHJcbiAgICAgICAgICAgICAgbWluLXdpZHRoOiAyNTBweDtcclxuICAgICAgICAgICAgICBvdmVyZmxvdy14OiBhdXRvO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfT5cclxuICAgICAgICAgICAgPEluY29tZVJlcG9ydCAvPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9DYXJkPlxyXG4gICAgICA8L0xheW91dD5cclxuICAgICAge21vZGFsRGV0YWlsTW9uZXl9XHJcbiAgICAgIDwvPlxyXG4gICAgKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRGFzaGJvYXJkIl19 */"
};

var _ref2 =  false ? undefined : {
  name: "im38rr",
  styles: "display:grid;grid-template-columns:1fr 1fr;grid-gap:2em;@media(max-width:768px){grid-template-columns:1fr;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref3 =  false ? undefined : {
  name: "1caa5f6",
  styles: "display:grid;grid-template-columns:repeat(4,1fr);grid-gap:1em;@media(max-width:768px){grid-template-columns:1fr;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref4 =  false ? undefined : {
  name: "1t7io01",
  styles: "display:grid;grid-template-columns:1fr 2fr;align-items:center;h1{font-size:1.5em;color:#959eab;}h2{font-size:13px;}img{width:40px;height:40px;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxEVENcXFByb2plY3QgUmVhY3RcXE1BUktJUi1GRVxcYXBsaWthc2ktMVxcY29tcG9uZW50c1xcY29udGFpbmVyc1xcZGFzaGJvYXJkXFxpbmRleC5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMEQyQiIsImZpbGUiOiJEOlxcRFRDXFxQcm9qZWN0IFJlYWN0XFxNQVJLSVItRkVcXGFwbGlrYXNpLTFcXGNvbXBvbmVudHNcXGNvbnRhaW5lcnNcXGRhc2hib2FyZFxcaW5kZXguanN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50fSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSdcclxuaW1wb3J0IHsgQ2FyZCwgTGF5b3V0LCBCdXR0b24sIE1vZGFsIH0gZnJvbSAnYW50ZCdcclxuaW1wb3J0IEluY29tZVJlcG9ydCBmcm9tICcuL2luY29tZVJlcG9ydCdcclxuXHJcbmNsYXNzIERhc2hib2FyZCBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gIHN0YXRlID0ge1xyXG4gICAgbG9hZGluZzogZmFsc2UsXHJcbiAgICB2aXNpYmxlOiBmYWxzZSxcclxuICB9XHJcblxyXG4gIHNob3dNb2RhbCA9ICgpID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGhhbmRsZU9rID0gKCkgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRpbmc6IHRydWUgfSlcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogZmFsc2UsIHZpc2libGU6IGZhbHNlIH0pXHJcbiAgICB9LCAzMDAwKVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlQ2FuY2VsID0gKCkgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IHZpc2libGU6IGZhbHNlIH0pXHJcbiAgfVxyXG5cclxuICByZW5kZXIoKXtcclxuXHJcbiAgICBjb25zdCB7IHZpc2libGUgfSA9IHRoaXMuc3RhdGVcclxuXHJcbiAgICBjb25zdCB0ZXMgPSBjc3NgXHJcbiAgICBiYWNrZ3JvdW5kOiAjZmZmO1xyXG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xyXG4gICAgYm9yZGVyLXRvcDogNHB4IHNvbGlkIHJnYigyNCwgMTQ0LCAyNTUpO1xyXG4gICAgYm94LXNoYWRvdzogMXB4IDRweCAxNXB4IHJnYmEoMjQsIDE0NCwgMjU1LCAwLjEpO1xyXG4gIGBcclxuXHJcbiAgICBjb25zdCBncmlkID0gY3NzYFxyXG4gICAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XHJcbiAgICAgIGdyaWQtZ2FwOiAyZW07XHJcbiAgICAgIEBtZWRpYShtYXgtd2lkdGg6IDc2OHB4KXtcclxuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcclxuICAgICAgfVxyXG4gICAgYFxyXG5cclxuICAgIGNvbnN0IGdyaWRWZWhpY2xlID0gY3NzYFxyXG4gICAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCg0LCAxZnIpO1xyXG4gICAgICBncmlkLWdhcDogMWVtO1xyXG4gICAgICBAbWVkaWEobWF4LXdpZHRoOiA3NjhweCl7XHJcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XHJcbiAgICAgIH1cclxuICAgIGBcclxuXHJcbiAgICBjb25zdCBjYXJkVmVoaWNsZSA9IGNzc2BcclxuICAgICAgZGlzcGxheTogZ3JpZDtcclxuICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMmZyO1xyXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICBoMSB7XHJcbiAgICAgICAgZm9udC1zaXplOiAxLjVlbTtcclxuICAgICAgICBjb2xvcjogIzk1OWVhYjtcclxuICAgICAgfVxyXG4gICAgICBoMiB7XHJcbiAgICAgICAgZm9udC1zaXplOiAxM3B4O1xyXG4gICAgICB9XHJcbiAgICAgIGltZyB7XHJcbiAgICAgICAgd2lkdGg6IDQwcHg7XHJcbiAgICAgICAgaGVpZ2h0OiA0MHB4O1xyXG4gICAgICB9XHJcbiAgICBgXHJcblxyXG4gICAgY29uc3QgY2FyZE1vbmV5ID0gY3NzYFxyXG4gICAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDJmciAzZnI7XHJcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgIHBhZGRpbmc6IDFlbTtcclxuICAgICAgaDEge1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMmVtO1xyXG4gICAgICAgIGNvbG9yOiAjOTU5ZWFiO1xyXG4gICAgICB9XHJcbiAgICAgIGltZyB7XHJcbiAgICAgICAgd2lkdGg6IDEwMHB4O1xyXG4gICAgICAgIGhlaWdodDogMTAwcHg7XHJcbiAgICAgIH1cclxuICAgICAgPiBkaXYge1xyXG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgYnV0dG9uIHtcclxuICAgICAgICAgIGp1c3RpZnktc2VsZjogZW5kOyBcclxuICAgICAgICAgIHRyYW5zaXRpb246IDAuM3MgIWltcG9ydGFudDtcclxuICAgICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgICBib3gtc2hhZG93OiAwcHggNXB4IDEwcHggcmdiYSgyNCwgMTQ0LCAyNTUsIDAuMikgIWltcG9ydGFudDtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0zcHgpICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgICB9IFxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBAbWVkaWEobWF4LXdpZHRoOiA3MDBweCkge1xyXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDJmcjtcclxuICAgICAgICBpbWcge1xyXG4gICAgICAgICAgd2lkdGg6IDYwcHg7XHJcbiAgICAgICAgICBoZWlnaHQ6IDYwcHhcclxuICAgICAgICB9XHJcbiAgICAgICAgaDEsaDIge1xyXG4gICAgICAgICAgZm9udC1zaXplOiAxZW07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICBgXHJcblxyXG4gICAgY29uc3Qgbm9taW5hbEluY29tZSA9IChcclxuICAgICAgPGRpdiBjc3M9eyBncmlkIH0+XHJcbiAgICAgICAgPENhcmQgYm9yZGVyZWQ9e2ZhbHNlfSBjc3M9eyB0ZXMgfT5cclxuICAgICAgICAgIDxkaXYgY3NzPXtjYXJkTW9uZXl9PlxyXG4gICAgICAgICAgICA8aW1nIHNyYz1cIi9zdGF0aWMvaWNvbnMvY2FzaC5wbmdcIiAvPlxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgIDxoMj5DYXNoPC9oMj5cclxuICAgICAgICAgICAgICA8aDE+UnAuIDEuMjM1LjAwMC4wMDA8L2gxPlxyXG4gICAgICAgICAgICAgIDxCdXR0b24gdHlwZT1cInByaW1hcnlcIiBnaG9zdCBvbkNsaWNrPXt0aGlzLnNob3dNb2RhbH0+RGV0YWlsPC9CdXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9DYXJkPlxyXG4gICAgICAgIDxDYXJkIGJvcmRlcmVkPXtmYWxzZX0gY3NzPXsgdGVzIH0+XHJcbiAgICAgICAgICA8ZGl2IGNzcz17Y2FyZE1vbmV5fT5cclxuICAgICAgICAgICAgPGltZyBzcmM9XCIvc3RhdGljL2ljb25zL25vbmNhc2gucG5nXCIgLz5cclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICA8aDI+Tm9uIENhc2g8L2gyPlxyXG4gICAgICAgICAgICAgIDxoMT5ScC4gMS4yMzUuMDAwLjAwMDwvaDE+XHJcbiAgICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPVwicHJpbWFyeVwiIGdob3N0IG9uQ2xpY2s9e3RoaXMuc2hvd01vZGFsfT5EZXRhaWw8L0J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L0NhcmQ+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG5cclxuICAgIGNvbnN0IG51bWJlck9mVmVoaWNsZSA9IChcclxuICAgICAgPGRpdiBjc3M9eyBncmlkVmVoaWNsZSB9PlxyXG4gICAgICAgIDxDYXJkIGJvcmRlcmVkPXtmYWxzZX0gY3NzPXsgdGVzIH0+XHJcbiAgICAgICAgICA8ZGl2IGNzcz17Y2FyZFZlaGljbGV9PlxyXG4gICAgICAgICAgICA8aW1nIHNyYz1cIi9zdGF0aWMvaWNvbnMvbW90b3IxLnBuZ1wiIC8+XHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgPGgyPk1vdG9yY3ljbGVzPC9oMj5cclxuICAgICAgICAgICAgICA8aDE+MC8xMDA8L2gxPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvQ2FyZD5cclxuICAgICAgICA8Q2FyZCBib3JkZXJlZD17ZmFsc2V9IGNzcz17IHRlcyB9PlxyXG4gICAgICAgICAgPGRpdiBjc3M9e2NhcmRWZWhpY2xlfT5cclxuICAgICAgICAgICAgPGltZyBzcmM9XCIvc3RhdGljL2ljb25zL2Nhci5wbmdcIiAvPlxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgIDxoMj5DYXI8L2gyPlxyXG4gICAgICAgICAgICAgIDxoMT4wLzEwMDwvaDE+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9DYXJkPlxyXG4gICAgICAgIDxDYXJkIGJvcmRlcmVkPXtmYWxzZX0gY3NzPXsgdGVzIH0+XHJcbiAgICAgICAgICA8ZGl2IGNzcz17Y2FyZFZlaGljbGV9PlxyXG4gICAgICAgICAgICA8aW1nIHNyYz1cIi9zdGF0aWMvaWNvbnMvbW90b3IucG5nXCIgLz5cclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICA8aDI+TW90b3JjeWNsZXMgJmd0OyAyNTBjYzwvaDI+XHJcbiAgICAgICAgICAgICAgPGgxPjAvMTAwPC9oMT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L0NhcmQ+XHJcbiAgICAgICAgPENhcmQgYm9yZGVyZWQ9e2ZhbHNlfSBjc3M9eyB0ZXMgfT5cclxuICAgICAgICAgIDxkaXYgY3NzPXtjYXJkVmVoaWNsZX0+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPVwiL3N0YXRpYy9pY29ucy9iaWdjYXIucG5nXCIgLz5cclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICA8aDI+QmlnIENhcjwvaDI+XHJcbiAgICAgICAgICAgICAgPGgxPjAvMTAwPC9oMT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L0NhcmQ+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG5cclxuICAgIGNvbnN0IG1vZGFsRGV0YWlsTW9uZXkgPSAoXHJcbiAgICAgIDxNb2RhbFxyXG4gICAgICAgIHZpc2libGU9e3Zpc2libGV9XHJcbiAgICAgICAgdGl0bGU9XCJEZXRhaWxcIlxyXG4gICAgICAgIG9uT2s9eygpID0+IHRoaXMuaGFuZGxlT2soJ2RldGFpbCcpfVxyXG4gICAgICAgIG9uQ2FuY2VsPXsoKSA9PiB0aGlzLmhhbmRsZUNhbmNlbCgnZGV0YWlsJyl9XHJcbiAgICAgICAgZm9vdGVyPXtbXHJcbiAgICAgICAgICA8QnV0dG9uIGtleT1cInN1Ym1pdFwiIHR5cGU9XCJwcmltYXJ5XCIgZ2hvc3Qgb25DbGljaz17KCk9PnRoaXMuaGFuZGxlT2soJ2VkaXQnKX0+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPVwic3RhdGljL2ljb25zL3ByaW50LnBuZ1wiIHdpZHRoPVwiMjBweFwiLz4gUHJpbnQgRGF0YVxyXG4gICAgICAgICAgPC9CdXR0b24+LFxyXG4gICAgICAgIF19XHJcbiAgICAgICAgd2lkdGg9XCI5MCVcIlxyXG4gICAgICA+XHJcbiAgICAgICAgPEluY29tZVJlcG9ydCAvPlxyXG4gICAgICA8L01vZGFsPlxyXG4gICAgKVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDw+XHJcbiAgICAgIDxMYXlvdXQgY3NzPXtjc3NgXHJcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcclxuICAgICAgICBncmlkLXJvdy1nYXA6IDFlbTtcclxuICAgICAgYH0+XHJcbiAgICAgICAgPENhcmQgdGl0bGU9XCJOT01JTkFMIElOQ09NRVwiIGJvcmRlcmVkPXtmYWxzZX0gdHlwZT1cImlubmVyXCI+XHJcbiAgICAgICAgICB7IG5vbWluYWxJbmNvbWUgfVxyXG4gICAgICAgIDwvQ2FyZD5cclxuICAgICAgICA8Q2FyZCB0aXRsZT1cIk5VTUJFUiBPRiBWRUhJQ0xFU1wiIGJvcmRlcmVkPXtmYWxzZX0gdHlwZT1cImlubmVyXCI+XHJcbiAgICAgICAgICB7IG51bWJlck9mVmVoaWNsZSB9XHJcbiAgICAgICAgPC9DYXJkPlxyXG4gICAgICAgIDxDYXJkIHRpdGxlPVwiSU5DT01FIFJFUE9SVFwiIGJvcmRlcmVkPXtmYWxzZX0gdHlwZT1cImlubmVyXCIgY3NzPXtjc3NgXHJcbiAgICAgICAgICBAbWVkaWEobWF4LXdpZHRoOiA3MDBweCl7XHJcbiAgICAgICAgICAgIG1pbi13aWR0aDogODB2dztcclxuICAgICAgICAgIH1cclxuICAgICAgICBgfT5cclxuICAgICAgICAgIDxkaXYgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIEBtZWRpYShtYXgtd2lkdGg6IDcwMHB4KSB7XHJcbiAgICAgICAgICAgICAgbWluLXdpZHRoOiAyNTBweDtcclxuICAgICAgICAgICAgICBvdmVyZmxvdy14OiBhdXRvO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfT5cclxuICAgICAgICAgICAgPEluY29tZVJlcG9ydCAvPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9DYXJkPlxyXG4gICAgICA8L0xheW91dD5cclxuICAgICAge21vZGFsRGV0YWlsTW9uZXl9XHJcbiAgICAgIDwvPlxyXG4gICAgKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRGFzaGJvYXJkIl19 */"
};

var _ref5 =  false ? undefined : {
  name: "9v8s64",
  styles: "display:grid;grid-template-columns:2fr 3fr;align-items:center;padding:1em;h1{font-size:2em;color:#959eab;}img{width:100px;height:100px;}> div{display:grid;button{justify-self:end;transition:0.3s !important;&:hover{box-shadow:0px 5px 10px rgba(24,144,255,0.2) !important;transform:translateY(-3px) !important;}}}@media(max-width:700px){grid-template-columns:1fr 2fr;img{width:60px;height:60px}h1,h2{font-size:1em;}}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref6 =  false ? undefined : {
  name: "1rzzrpk",
  styles: "display:grid;grid-row-gap:1em;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref7 =  false ? undefined : {
  name: "1gxc6jl",
  styles: "@media(max-width:700px){min-width:80vw;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref8 =  false ? undefined : {
  name: "1rqpsdp",
  styles: "@media(max-width:700px){min-width:250px;overflow-x:auto;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var Dashboard =
/*#__PURE__*/
function (_Component) {
  _inherits(Dashboard, _Component);

  function Dashboard() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Dashboard);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dashboard)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      loading: false,
      visible: false
    });

    _defineProperty(_assertThisInitialized(_this), "showModal", function () {
      _this.setState({
        visible: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleOk", function () {
      _this.setState({
        loading: true
      });

      setTimeout(function () {
        _this.setState({
          loading: false,
          visible: false
        });
      }, 3000);
    });

    _defineProperty(_assertThisInitialized(_this), "handleCancel", function () {
      _this.setState({
        visible: false
      });
    });

    return _this;
  }

  _createClass(Dashboard, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var visible = this.state.visible;
      var tes = _ref;
      var grid = _ref2;
      var gridVehicle = _ref3;
      var cardVehicle = _ref4;
      var cardMoney = _ref5;

      var nominalIncome = Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
        css: grid
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])(antd_lib_card__WEBPACK_IMPORTED_MODULE_2___default.a, {
        bordered: false,
        css: tes
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
        css: cardMoney
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("img", {
        src: "/static/icons/cash.png"
      }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("h2", null, "Cash"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("h1", null, "Rp. 1.235.000.000"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_3___default.a, {
        type: "primary",
        ghost: true,
        onClick: this.showModal
      }, "Detail")))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])(antd_lib_card__WEBPACK_IMPORTED_MODULE_2___default.a, {
        bordered: false,
        css: tes
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
        css: cardMoney
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("img", {
        src: "/static/icons/noncash.png"
      }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("h2", null, "Non Cash"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("h1", null, "Rp. 1.235.000.000"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_3___default.a, {
        type: "primary",
        ghost: true,
        onClick: this.showModal
      }, "Detail")))));

      var numberOfVehicle = Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
        css: gridVehicle
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])(antd_lib_card__WEBPACK_IMPORTED_MODULE_2___default.a, {
        bordered: false,
        css: tes
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
        css: cardVehicle
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("img", {
        src: "/static/icons/motor1.png"
      }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("h2", null, "Motorcycles"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("h1", null, "0/100")))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])(antd_lib_card__WEBPACK_IMPORTED_MODULE_2___default.a, {
        bordered: false,
        css: tes
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
        css: cardVehicle
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("img", {
        src: "/static/icons/car.png"
      }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("h2", null, "Car"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("h1", null, "0/100")))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])(antd_lib_card__WEBPACK_IMPORTED_MODULE_2___default.a, {
        bordered: false,
        css: tes
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
        css: cardVehicle
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("img", {
        src: "/static/icons/motor.png"
      }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("h2", null, "Motorcycles > 250cc"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("h1", null, "0/100")))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])(antd_lib_card__WEBPACK_IMPORTED_MODULE_2___default.a, {
        bordered: false,
        css: tes
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
        css: cardVehicle
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("img", {
        src: "/static/icons/bigcar.png"
      }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("h2", null, "Big Car"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("h1", null, "0/100")))));

      var modalDetailMoney = Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])(antd_lib_modal__WEBPACK_IMPORTED_MODULE_1___default.a, {
        visible: visible,
        title: "Detail",
        onOk: function onOk() {
          return _this2.handleOk('detail');
        },
        onCancel: function onCancel() {
          return _this2.handleCancel('detail');
        },
        footer: [Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])(antd_lib_button__WEBPACK_IMPORTED_MODULE_3___default.a, {
          key: "submit",
          type: "primary",
          ghost: true,
          onClick: function onClick() {
            return _this2.handleOk('edit');
          }
        }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("img", {
          src: "static/icons/print.png",
          width: "20px"
        }), " Print Data")],
        width: "90%"
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])(_incomeReport__WEBPACK_IMPORTED_MODULE_6__["default"], null));

      return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])(react__WEBPACK_IMPORTED_MODULE_5___default.a.Fragment, null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])(antd_lib_layout__WEBPACK_IMPORTED_MODULE_0___default.a, {
        css: _ref6
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])(antd_lib_card__WEBPACK_IMPORTED_MODULE_2___default.a, {
        title: "NOMINAL INCOME",
        bordered: false,
        type: "inner"
      }, nominalIncome), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])(antd_lib_card__WEBPACK_IMPORTED_MODULE_2___default.a, {
        title: "NUMBER OF VEHICLES",
        bordered: false,
        type: "inner"
      }, numberOfVehicle), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])(antd_lib_card__WEBPACK_IMPORTED_MODULE_2___default.a, {
        title: "INCOME REPORT",
        bordered: false,
        type: "inner",
        css: _ref7
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
        css: _ref8
      }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])(_incomeReport__WEBPACK_IMPORTED_MODULE_6__["default"], null)))), modalDetailMoney);
    }
  }]);

  return Dashboard;
}(react__WEBPACK_IMPORTED_MODULE_5__["Component"]);

/* harmony default export */ __webpack_exports__["default"] = (Dashboard);

/***/ })

})
//# sourceMappingURL=dashboard.js.8674cbb67234aa49e5c0.hot-update.js.map